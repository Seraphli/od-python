# coding: utf-8

"""
    OpenDota API

    # Introduction This API provides Dota 2 related data. Please keep request rate to approximately 3/s. 

    OpenAPI spec version: 15.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse200(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_id': 'float',
        'barracks_status_dire': 'float',
        'barracks_status_radiant': 'float',
        'chat': 'list[InlineResponse200Chat]',
        'cluster': 'float',
        'cosmetics': 'object',
        'dire_score': 'float',
        'duration': 'float',
        'engine': 'float',
        'first_blood_time': 'float',
        'game_mode': 'float',
        'human_players': 'float',
        'leagueid': 'float',
        'lobby_type': 'float',
        'match_seq_num': 'float',
        'negative_votes': 'float',
        'objectives': 'object',
        'picks_bans': 'object',
        'positive_votes': 'float',
        'radiant_gold_adv': 'object',
        'radiant_score': 'float',
        'radiant_win': 'bool',
        'radiant_xp_adv': 'object',
        'start_time': 'float',
        'teamfights': 'object',
        'tower_status_dire': 'float',
        'tower_status_radiant': 'float',
        'version': 'float',
        'replay_salt': 'float',
        'series_id': 'float',
        'series_type': 'float',
        'radiant_team': 'object',
        'dire_team': 'object',
        'league': 'object',
        'skill': 'float',
        'players': 'list[InlineResponse200Players]',
        'patch': 'float',
        'region': 'float',
        'all_word_counts': 'object',
        'my_word_counts': 'object',
        'throw': 'float',
        'loss': 'float',
        'replay_url': 'str'
    }

    attribute_map = {
        'match_id': 'match_id',
        'barracks_status_dire': 'barracks_status_dire',
        'barracks_status_radiant': 'barracks_status_radiant',
        'chat': 'chat',
        'cluster': 'cluster',
        'cosmetics': 'cosmetics',
        'dire_score': 'dire_score',
        'duration': 'duration',
        'engine': 'engine',
        'first_blood_time': 'first_blood_time',
        'game_mode': 'game_mode',
        'human_players': 'human_players',
        'leagueid': 'leagueid',
        'lobby_type': 'lobby_type',
        'match_seq_num': 'match_seq_num',
        'negative_votes': 'negative_votes',
        'objectives': 'objectives',
        'picks_bans': 'picks_bans',
        'positive_votes': 'positive_votes',
        'radiant_gold_adv': 'radiant_gold_adv',
        'radiant_score': 'radiant_score',
        'radiant_win': 'radiant_win',
        'radiant_xp_adv': 'radiant_xp_adv',
        'start_time': 'start_time',
        'teamfights': 'teamfights',
        'tower_status_dire': 'tower_status_dire',
        'tower_status_radiant': 'tower_status_radiant',
        'version': 'version',
        'replay_salt': 'replay_salt',
        'series_id': 'series_id',
        'series_type': 'series_type',
        'radiant_team': 'radiant_team',
        'dire_team': 'dire_team',
        'league': 'league',
        'skill': 'skill',
        'players': 'players',
        'patch': 'patch',
        'region': 'region',
        'all_word_counts': 'all_word_counts',
        'my_word_counts': 'my_word_counts',
        'throw': 'throw',
        'loss': 'loss',
        'replay_url': 'replay_url'
    }

    def __init__(self, match_id=None, barracks_status_dire=None, barracks_status_radiant=None, chat=None, cluster=None, cosmetics=None, dire_score=None, duration=None, engine=None, first_blood_time=None, game_mode=None, human_players=None, leagueid=None, lobby_type=None, match_seq_num=None, negative_votes=None, objectives=None, picks_bans=None, positive_votes=None, radiant_gold_adv=None, radiant_score=None, radiant_win=None, radiant_xp_adv=None, start_time=None, teamfights=None, tower_status_dire=None, tower_status_radiant=None, version=None, replay_salt=None, series_id=None, series_type=None, radiant_team=None, dire_team=None, league=None, skill=None, players=None, patch=None, region=None, all_word_counts=None, my_word_counts=None, throw=None, loss=None, replay_url=None):
        """
        InlineResponse200 - a model defined in Swagger
        """

        self._match_id = None
        self._barracks_status_dire = None
        self._barracks_status_radiant = None
        self._chat = None
        self._cluster = None
        self._cosmetics = None
        self._dire_score = None
        self._duration = None
        self._engine = None
        self._first_blood_time = None
        self._game_mode = None
        self._human_players = None
        self._leagueid = None
        self._lobby_type = None
        self._match_seq_num = None
        self._negative_votes = None
        self._objectives = None
        self._picks_bans = None
        self._positive_votes = None
        self._radiant_gold_adv = None
        self._radiant_score = None
        self._radiant_win = None
        self._radiant_xp_adv = None
        self._start_time = None
        self._teamfights = None
        self._tower_status_dire = None
        self._tower_status_radiant = None
        self._version = None
        self._replay_salt = None
        self._series_id = None
        self._series_type = None
        self._radiant_team = None
        self._dire_team = None
        self._league = None
        self._skill = None
        self._players = None
        self._patch = None
        self._region = None
        self._all_word_counts = None
        self._my_word_counts = None
        self._throw = None
        self._loss = None
        self._replay_url = None

        if match_id is not None:
          self.match_id = match_id
        if barracks_status_dire is not None:
          self.barracks_status_dire = barracks_status_dire
        if barracks_status_radiant is not None:
          self.barracks_status_radiant = barracks_status_radiant
        if chat is not None:
          self.chat = chat
        if cluster is not None:
          self.cluster = cluster
        if cosmetics is not None:
          self.cosmetics = cosmetics
        if dire_score is not None:
          self.dire_score = dire_score
        if duration is not None:
          self.duration = duration
        if engine is not None:
          self.engine = engine
        if first_blood_time is not None:
          self.first_blood_time = first_blood_time
        if game_mode is not None:
          self.game_mode = game_mode
        if human_players is not None:
          self.human_players = human_players
        if leagueid is not None:
          self.leagueid = leagueid
        if lobby_type is not None:
          self.lobby_type = lobby_type
        if match_seq_num is not None:
          self.match_seq_num = match_seq_num
        if negative_votes is not None:
          self.negative_votes = negative_votes
        if objectives is not None:
          self.objectives = objectives
        if picks_bans is not None:
          self.picks_bans = picks_bans
        if positive_votes is not None:
          self.positive_votes = positive_votes
        if radiant_gold_adv is not None:
          self.radiant_gold_adv = radiant_gold_adv
        if radiant_score is not None:
          self.radiant_score = radiant_score
        if radiant_win is not None:
          self.radiant_win = radiant_win
        if radiant_xp_adv is not None:
          self.radiant_xp_adv = radiant_xp_adv
        if start_time is not None:
          self.start_time = start_time
        if teamfights is not None:
          self.teamfights = teamfights
        if tower_status_dire is not None:
          self.tower_status_dire = tower_status_dire
        if tower_status_radiant is not None:
          self.tower_status_radiant = tower_status_radiant
        if version is not None:
          self.version = version
        if replay_salt is not None:
          self.replay_salt = replay_salt
        if series_id is not None:
          self.series_id = series_id
        if series_type is not None:
          self.series_type = series_type
        if radiant_team is not None:
          self.radiant_team = radiant_team
        if dire_team is not None:
          self.dire_team = dire_team
        if league is not None:
          self.league = league
        if skill is not None:
          self.skill = skill
        if players is not None:
          self.players = players
        if patch is not None:
          self.patch = patch
        if region is not None:
          self.region = region
        if all_word_counts is not None:
          self.all_word_counts = all_word_counts
        if my_word_counts is not None:
          self.my_word_counts = my_word_counts
        if throw is not None:
          self.throw = throw
        if loss is not None:
          self.loss = loss
        if replay_url is not None:
          self.replay_url = replay_url

    @property
    def match_id(self):
        """
        Gets the match_id of this InlineResponse200.
        match_id

        :return: The match_id of this InlineResponse200.
        :rtype: float
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """
        Sets the match_id of this InlineResponse200.
        match_id

        :param match_id: The match_id of this InlineResponse200.
        :type: float
        """

        self._match_id = match_id

    @property
    def barracks_status_dire(self):
        """
        Gets the barracks_status_dire of this InlineResponse200.
        barracks_status_dire

        :return: The barracks_status_dire of this InlineResponse200.
        :rtype: float
        """
        return self._barracks_status_dire

    @barracks_status_dire.setter
    def barracks_status_dire(self, barracks_status_dire):
        """
        Sets the barracks_status_dire of this InlineResponse200.
        barracks_status_dire

        :param barracks_status_dire: The barracks_status_dire of this InlineResponse200.
        :type: float
        """

        self._barracks_status_dire = barracks_status_dire

    @property
    def barracks_status_radiant(self):
        """
        Gets the barracks_status_radiant of this InlineResponse200.
        barracks_status_radiant

        :return: The barracks_status_radiant of this InlineResponse200.
        :rtype: float
        """
        return self._barracks_status_radiant

    @barracks_status_radiant.setter
    def barracks_status_radiant(self, barracks_status_radiant):
        """
        Sets the barracks_status_radiant of this InlineResponse200.
        barracks_status_radiant

        :param barracks_status_radiant: The barracks_status_radiant of this InlineResponse200.
        :type: float
        """

        self._barracks_status_radiant = barracks_status_radiant

    @property
    def chat(self):
        """
        Gets the chat of this InlineResponse200.
        chat

        :return: The chat of this InlineResponse200.
        :rtype: list[InlineResponse200Chat]
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """
        Sets the chat of this InlineResponse200.
        chat

        :param chat: The chat of this InlineResponse200.
        :type: list[InlineResponse200Chat]
        """

        self._chat = chat

    @property
    def cluster(self):
        """
        Gets the cluster of this InlineResponse200.
        cluster

        :return: The cluster of this InlineResponse200.
        :rtype: float
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this InlineResponse200.
        cluster

        :param cluster: The cluster of this InlineResponse200.
        :type: float
        """

        self._cluster = cluster

    @property
    def cosmetics(self):
        """
        Gets the cosmetics of this InlineResponse200.
        cosmetics

        :return: The cosmetics of this InlineResponse200.
        :rtype: object
        """
        return self._cosmetics

    @cosmetics.setter
    def cosmetics(self, cosmetics):
        """
        Sets the cosmetics of this InlineResponse200.
        cosmetics

        :param cosmetics: The cosmetics of this InlineResponse200.
        :type: object
        """

        self._cosmetics = cosmetics

    @property
    def dire_score(self):
        """
        Gets the dire_score of this InlineResponse200.
        dire_score

        :return: The dire_score of this InlineResponse200.
        :rtype: float
        """
        return self._dire_score

    @dire_score.setter
    def dire_score(self, dire_score):
        """
        Sets the dire_score of this InlineResponse200.
        dire_score

        :param dire_score: The dire_score of this InlineResponse200.
        :type: float
        """

        self._dire_score = dire_score

    @property
    def duration(self):
        """
        Gets the duration of this InlineResponse200.
        duration

        :return: The duration of this InlineResponse200.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this InlineResponse200.
        duration

        :param duration: The duration of this InlineResponse200.
        :type: float
        """

        self._duration = duration

    @property
    def engine(self):
        """
        Gets the engine of this InlineResponse200.
        engine

        :return: The engine of this InlineResponse200.
        :rtype: float
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """
        Sets the engine of this InlineResponse200.
        engine

        :param engine: The engine of this InlineResponse200.
        :type: float
        """

        self._engine = engine

    @property
    def first_blood_time(self):
        """
        Gets the first_blood_time of this InlineResponse200.
        first_blood_time

        :return: The first_blood_time of this InlineResponse200.
        :rtype: float
        """
        return self._first_blood_time

    @first_blood_time.setter
    def first_blood_time(self, first_blood_time):
        """
        Sets the first_blood_time of this InlineResponse200.
        first_blood_time

        :param first_blood_time: The first_blood_time of this InlineResponse200.
        :type: float
        """

        self._first_blood_time = first_blood_time

    @property
    def game_mode(self):
        """
        Gets the game_mode of this InlineResponse200.
        game_mode

        :return: The game_mode of this InlineResponse200.
        :rtype: float
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """
        Sets the game_mode of this InlineResponse200.
        game_mode

        :param game_mode: The game_mode of this InlineResponse200.
        :type: float
        """

        self._game_mode = game_mode

    @property
    def human_players(self):
        """
        Gets the human_players of this InlineResponse200.
        human_players

        :return: The human_players of this InlineResponse200.
        :rtype: float
        """
        return self._human_players

    @human_players.setter
    def human_players(self, human_players):
        """
        Sets the human_players of this InlineResponse200.
        human_players

        :param human_players: The human_players of this InlineResponse200.
        :type: float
        """

        self._human_players = human_players

    @property
    def leagueid(self):
        """
        Gets the leagueid of this InlineResponse200.
        leagueid

        :return: The leagueid of this InlineResponse200.
        :rtype: float
        """
        return self._leagueid

    @leagueid.setter
    def leagueid(self, leagueid):
        """
        Sets the leagueid of this InlineResponse200.
        leagueid

        :param leagueid: The leagueid of this InlineResponse200.
        :type: float
        """

        self._leagueid = leagueid

    @property
    def lobby_type(self):
        """
        Gets the lobby_type of this InlineResponse200.
        lobby_type

        :return: The lobby_type of this InlineResponse200.
        :rtype: float
        """
        return self._lobby_type

    @lobby_type.setter
    def lobby_type(self, lobby_type):
        """
        Sets the lobby_type of this InlineResponse200.
        lobby_type

        :param lobby_type: The lobby_type of this InlineResponse200.
        :type: float
        """

        self._lobby_type = lobby_type

    @property
    def match_seq_num(self):
        """
        Gets the match_seq_num of this InlineResponse200.
        match_seq_num

        :return: The match_seq_num of this InlineResponse200.
        :rtype: float
        """
        return self._match_seq_num

    @match_seq_num.setter
    def match_seq_num(self, match_seq_num):
        """
        Sets the match_seq_num of this InlineResponse200.
        match_seq_num

        :param match_seq_num: The match_seq_num of this InlineResponse200.
        :type: float
        """

        self._match_seq_num = match_seq_num

    @property
    def negative_votes(self):
        """
        Gets the negative_votes of this InlineResponse200.
        negative_votes

        :return: The negative_votes of this InlineResponse200.
        :rtype: float
        """
        return self._negative_votes

    @negative_votes.setter
    def negative_votes(self, negative_votes):
        """
        Sets the negative_votes of this InlineResponse200.
        negative_votes

        :param negative_votes: The negative_votes of this InlineResponse200.
        :type: float
        """

        self._negative_votes = negative_votes

    @property
    def objectives(self):
        """
        Gets the objectives of this InlineResponse200.
        objectives

        :return: The objectives of this InlineResponse200.
        :rtype: object
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """
        Sets the objectives of this InlineResponse200.
        objectives

        :param objectives: The objectives of this InlineResponse200.
        :type: object
        """

        self._objectives = objectives

    @property
    def picks_bans(self):
        """
        Gets the picks_bans of this InlineResponse200.
        picks_bans

        :return: The picks_bans of this InlineResponse200.
        :rtype: object
        """
        return self._picks_bans

    @picks_bans.setter
    def picks_bans(self, picks_bans):
        """
        Sets the picks_bans of this InlineResponse200.
        picks_bans

        :param picks_bans: The picks_bans of this InlineResponse200.
        :type: object
        """

        self._picks_bans = picks_bans

    @property
    def positive_votes(self):
        """
        Gets the positive_votes of this InlineResponse200.
        positive_votes

        :return: The positive_votes of this InlineResponse200.
        :rtype: float
        """
        return self._positive_votes

    @positive_votes.setter
    def positive_votes(self, positive_votes):
        """
        Sets the positive_votes of this InlineResponse200.
        positive_votes

        :param positive_votes: The positive_votes of this InlineResponse200.
        :type: float
        """

        self._positive_votes = positive_votes

    @property
    def radiant_gold_adv(self):
        """
        Gets the radiant_gold_adv of this InlineResponse200.
        radiant_gold_adv

        :return: The radiant_gold_adv of this InlineResponse200.
        :rtype: object
        """
        return self._radiant_gold_adv

    @radiant_gold_adv.setter
    def radiant_gold_adv(self, radiant_gold_adv):
        """
        Sets the radiant_gold_adv of this InlineResponse200.
        radiant_gold_adv

        :param radiant_gold_adv: The radiant_gold_adv of this InlineResponse200.
        :type: object
        """

        self._radiant_gold_adv = radiant_gold_adv

    @property
    def radiant_score(self):
        """
        Gets the radiant_score of this InlineResponse200.
        radiant_score

        :return: The radiant_score of this InlineResponse200.
        :rtype: float
        """
        return self._radiant_score

    @radiant_score.setter
    def radiant_score(self, radiant_score):
        """
        Sets the radiant_score of this InlineResponse200.
        radiant_score

        :param radiant_score: The radiant_score of this InlineResponse200.
        :type: float
        """

        self._radiant_score = radiant_score

    @property
    def radiant_win(self):
        """
        Gets the radiant_win of this InlineResponse200.
        radiant_win

        :return: The radiant_win of this InlineResponse200.
        :rtype: bool
        """
        return self._radiant_win

    @radiant_win.setter
    def radiant_win(self, radiant_win):
        """
        Sets the radiant_win of this InlineResponse200.
        radiant_win

        :param radiant_win: The radiant_win of this InlineResponse200.
        :type: bool
        """

        self._radiant_win = radiant_win

    @property
    def radiant_xp_adv(self):
        """
        Gets the radiant_xp_adv of this InlineResponse200.
        radiant_xp_adv

        :return: The radiant_xp_adv of this InlineResponse200.
        :rtype: object
        """
        return self._radiant_xp_adv

    @radiant_xp_adv.setter
    def radiant_xp_adv(self, radiant_xp_adv):
        """
        Sets the radiant_xp_adv of this InlineResponse200.
        radiant_xp_adv

        :param radiant_xp_adv: The radiant_xp_adv of this InlineResponse200.
        :type: object
        """

        self._radiant_xp_adv = radiant_xp_adv

    @property
    def start_time(self):
        """
        Gets the start_time of this InlineResponse200.
        start_time

        :return: The start_time of this InlineResponse200.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this InlineResponse200.
        start_time

        :param start_time: The start_time of this InlineResponse200.
        :type: float
        """

        self._start_time = start_time

    @property
    def teamfights(self):
        """
        Gets the teamfights of this InlineResponse200.
        teamfights

        :return: The teamfights of this InlineResponse200.
        :rtype: object
        """
        return self._teamfights

    @teamfights.setter
    def teamfights(self, teamfights):
        """
        Sets the teamfights of this InlineResponse200.
        teamfights

        :param teamfights: The teamfights of this InlineResponse200.
        :type: object
        """

        self._teamfights = teamfights

    @property
    def tower_status_dire(self):
        """
        Gets the tower_status_dire of this InlineResponse200.
        tower_status_dire

        :return: The tower_status_dire of this InlineResponse200.
        :rtype: float
        """
        return self._tower_status_dire

    @tower_status_dire.setter
    def tower_status_dire(self, tower_status_dire):
        """
        Sets the tower_status_dire of this InlineResponse200.
        tower_status_dire

        :param tower_status_dire: The tower_status_dire of this InlineResponse200.
        :type: float
        """

        self._tower_status_dire = tower_status_dire

    @property
    def tower_status_radiant(self):
        """
        Gets the tower_status_radiant of this InlineResponse200.
        tower_status_radiant

        :return: The tower_status_radiant of this InlineResponse200.
        :rtype: float
        """
        return self._tower_status_radiant

    @tower_status_radiant.setter
    def tower_status_radiant(self, tower_status_radiant):
        """
        Sets the tower_status_radiant of this InlineResponse200.
        tower_status_radiant

        :param tower_status_radiant: The tower_status_radiant of this InlineResponse200.
        :type: float
        """

        self._tower_status_radiant = tower_status_radiant

    @property
    def version(self):
        """
        Gets the version of this InlineResponse200.
        version

        :return: The version of this InlineResponse200.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this InlineResponse200.
        version

        :param version: The version of this InlineResponse200.
        :type: float
        """

        self._version = version

    @property
    def replay_salt(self):
        """
        Gets the replay_salt of this InlineResponse200.
        replay_salt

        :return: The replay_salt of this InlineResponse200.
        :rtype: float
        """
        return self._replay_salt

    @replay_salt.setter
    def replay_salt(self, replay_salt):
        """
        Sets the replay_salt of this InlineResponse200.
        replay_salt

        :param replay_salt: The replay_salt of this InlineResponse200.
        :type: float
        """

        self._replay_salt = replay_salt

    @property
    def series_id(self):
        """
        Gets the series_id of this InlineResponse200.
        series_id

        :return: The series_id of this InlineResponse200.
        :rtype: float
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """
        Sets the series_id of this InlineResponse200.
        series_id

        :param series_id: The series_id of this InlineResponse200.
        :type: float
        """

        self._series_id = series_id

    @property
    def series_type(self):
        """
        Gets the series_type of this InlineResponse200.
        series_type

        :return: The series_type of this InlineResponse200.
        :rtype: float
        """
        return self._series_type

    @series_type.setter
    def series_type(self, series_type):
        """
        Sets the series_type of this InlineResponse200.
        series_type

        :param series_type: The series_type of this InlineResponse200.
        :type: float
        """

        self._series_type = series_type

    @property
    def radiant_team(self):
        """
        Gets the radiant_team of this InlineResponse200.
        radiant_team

        :return: The radiant_team of this InlineResponse200.
        :rtype: object
        """
        return self._radiant_team

    @radiant_team.setter
    def radiant_team(self, radiant_team):
        """
        Sets the radiant_team of this InlineResponse200.
        radiant_team

        :param radiant_team: The radiant_team of this InlineResponse200.
        :type: object
        """

        self._radiant_team = radiant_team

    @property
    def dire_team(self):
        """
        Gets the dire_team of this InlineResponse200.
        dire_team

        :return: The dire_team of this InlineResponse200.
        :rtype: object
        """
        return self._dire_team

    @dire_team.setter
    def dire_team(self, dire_team):
        """
        Sets the dire_team of this InlineResponse200.
        dire_team

        :param dire_team: The dire_team of this InlineResponse200.
        :type: object
        """

        self._dire_team = dire_team

    @property
    def league(self):
        """
        Gets the league of this InlineResponse200.
        league

        :return: The league of this InlineResponse200.
        :rtype: object
        """
        return self._league

    @league.setter
    def league(self, league):
        """
        Sets the league of this InlineResponse200.
        league

        :param league: The league of this InlineResponse200.
        :type: object
        """

        self._league = league

    @property
    def skill(self):
        """
        Gets the skill of this InlineResponse200.
        skill

        :return: The skill of this InlineResponse200.
        :rtype: float
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """
        Sets the skill of this InlineResponse200.
        skill

        :param skill: The skill of this InlineResponse200.
        :type: float
        """

        self._skill = skill

    @property
    def players(self):
        """
        Gets the players of this InlineResponse200.
        players

        :return: The players of this InlineResponse200.
        :rtype: list[InlineResponse200Players]
        """
        return self._players

    @players.setter
    def players(self, players):
        """
        Sets the players of this InlineResponse200.
        players

        :param players: The players of this InlineResponse200.
        :type: list[InlineResponse200Players]
        """

        self._players = players

    @property
    def patch(self):
        """
        Gets the patch of this InlineResponse200.
        patch

        :return: The patch of this InlineResponse200.
        :rtype: float
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """
        Sets the patch of this InlineResponse200.
        patch

        :param patch: The patch of this InlineResponse200.
        :type: float
        """

        self._patch = patch

    @property
    def region(self):
        """
        Gets the region of this InlineResponse200.
        region

        :return: The region of this InlineResponse200.
        :rtype: float
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this InlineResponse200.
        region

        :param region: The region of this InlineResponse200.
        :type: float
        """

        self._region = region

    @property
    def all_word_counts(self):
        """
        Gets the all_word_counts of this InlineResponse200.
        all_word_counts

        :return: The all_word_counts of this InlineResponse200.
        :rtype: object
        """
        return self._all_word_counts

    @all_word_counts.setter
    def all_word_counts(self, all_word_counts):
        """
        Sets the all_word_counts of this InlineResponse200.
        all_word_counts

        :param all_word_counts: The all_word_counts of this InlineResponse200.
        :type: object
        """

        self._all_word_counts = all_word_counts

    @property
    def my_word_counts(self):
        """
        Gets the my_word_counts of this InlineResponse200.
        my_word_counts

        :return: The my_word_counts of this InlineResponse200.
        :rtype: object
        """
        return self._my_word_counts

    @my_word_counts.setter
    def my_word_counts(self, my_word_counts):
        """
        Sets the my_word_counts of this InlineResponse200.
        my_word_counts

        :param my_word_counts: The my_word_counts of this InlineResponse200.
        :type: object
        """

        self._my_word_counts = my_word_counts

    @property
    def throw(self):
        """
        Gets the throw of this InlineResponse200.
        throw

        :return: The throw of this InlineResponse200.
        :rtype: float
        """
        return self._throw

    @throw.setter
    def throw(self, throw):
        """
        Sets the throw of this InlineResponse200.
        throw

        :param throw: The throw of this InlineResponse200.
        :type: float
        """

        self._throw = throw

    @property
    def loss(self):
        """
        Gets the loss of this InlineResponse200.
        loss

        :return: The loss of this InlineResponse200.
        :rtype: float
        """
        return self._loss

    @loss.setter
    def loss(self, loss):
        """
        Sets the loss of this InlineResponse200.
        loss

        :param loss: The loss of this InlineResponse200.
        :type: float
        """

        self._loss = loss

    @property
    def replay_url(self):
        """
        Gets the replay_url of this InlineResponse200.
        replay_url

        :return: The replay_url of this InlineResponse200.
        :rtype: str
        """
        return self._replay_url

    @replay_url.setter
    def replay_url(self, replay_url):
        """
        Sets the replay_url of this InlineResponse200.
        replay_url

        :param replay_url: The replay_url of this InlineResponse200.
        :type: str
        """

        self._replay_url = replay_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
