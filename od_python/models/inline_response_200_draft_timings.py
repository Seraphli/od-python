# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays. Please keep request rate to approximately 1/s.  **Begining 4/22/2018, the OpenDota API will be limited to 50,000 free calls per month.** We'll be offering a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 17.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse200DraftTimings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order': 'int',
        'pick': 'bool',
        'active_team': 'int',
        'hero_id': 'int',
        'player_slot': 'int',
        'extra_time': 'int',
        'total_time_taken': 'int'
    }

    attribute_map = {
        'order': 'order',
        'pick': 'pick',
        'active_team': 'active_team',
        'hero_id': 'hero_id',
        'player_slot': 'player_slot',
        'extra_time': 'extra_time',
        'total_time_taken': 'total_time_taken'
    }

    def __init__(self, order=None, pick=None, active_team=None, hero_id=None, player_slot=None, extra_time=None, total_time_taken=None):
        """
        InlineResponse200DraftTimings - a model defined in Swagger
        """

        self._order = None
        self._pick = None
        self._active_team = None
        self._hero_id = None
        self._player_slot = None
        self._extra_time = None
        self._total_time_taken = None

        if order is not None:
          self.order = order
        if pick is not None:
          self.pick = pick
        if active_team is not None:
          self.active_team = active_team
        if hero_id is not None:
          self.hero_id = hero_id
        if player_slot is not None:
          self.player_slot = player_slot
        if extra_time is not None:
          self.extra_time = extra_time
        if total_time_taken is not None:
          self.total_time_taken = total_time_taken

    @property
    def order(self):
        """
        Gets the order of this InlineResponse200DraftTimings.
        order

        :return: The order of this InlineResponse200DraftTimings.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this InlineResponse200DraftTimings.
        order

        :param order: The order of this InlineResponse200DraftTimings.
        :type: int
        """

        self._order = order

    @property
    def pick(self):
        """
        Gets the pick of this InlineResponse200DraftTimings.
        pick

        :return: The pick of this InlineResponse200DraftTimings.
        :rtype: bool
        """
        return self._pick

    @pick.setter
    def pick(self, pick):
        """
        Sets the pick of this InlineResponse200DraftTimings.
        pick

        :param pick: The pick of this InlineResponse200DraftTimings.
        :type: bool
        """

        self._pick = pick

    @property
    def active_team(self):
        """
        Gets the active_team of this InlineResponse200DraftTimings.
        active_team

        :return: The active_team of this InlineResponse200DraftTimings.
        :rtype: int
        """
        return self._active_team

    @active_team.setter
    def active_team(self, active_team):
        """
        Sets the active_team of this InlineResponse200DraftTimings.
        active_team

        :param active_team: The active_team of this InlineResponse200DraftTimings.
        :type: int
        """

        self._active_team = active_team

    @property
    def hero_id(self):
        """
        Gets the hero_id of this InlineResponse200DraftTimings.

        :return: The hero_id of this InlineResponse200DraftTimings.
        :rtype: int
        """
        return self._hero_id

    @hero_id.setter
    def hero_id(self, hero_id):
        """
        Sets the hero_id of this InlineResponse200DraftTimings.

        :param hero_id: The hero_id of this InlineResponse200DraftTimings.
        :type: int
        """

        self._hero_id = hero_id

    @property
    def player_slot(self):
        """
        Gets the player_slot of this InlineResponse200DraftTimings.
        Which slot the player is in. 0-127 are Radiant, 128-255 are Dire

        :return: The player_slot of this InlineResponse200DraftTimings.
        :rtype: int
        """
        return self._player_slot

    @player_slot.setter
    def player_slot(self, player_slot):
        """
        Sets the player_slot of this InlineResponse200DraftTimings.
        Which slot the player is in. 0-127 are Radiant, 128-255 are Dire

        :param player_slot: The player_slot of this InlineResponse200DraftTimings.
        :type: int
        """

        self._player_slot = player_slot

    @property
    def extra_time(self):
        """
        Gets the extra_time of this InlineResponse200DraftTimings.
        extra_time

        :return: The extra_time of this InlineResponse200DraftTimings.
        :rtype: int
        """
        return self._extra_time

    @extra_time.setter
    def extra_time(self, extra_time):
        """
        Sets the extra_time of this InlineResponse200DraftTimings.
        extra_time

        :param extra_time: The extra_time of this InlineResponse200DraftTimings.
        :type: int
        """

        self._extra_time = extra_time

    @property
    def total_time_taken(self):
        """
        Gets the total_time_taken of this InlineResponse200DraftTimings.
        total_time_taken

        :return: The total_time_taken of this InlineResponse200DraftTimings.
        :rtype: int
        """
        return self._total_time_taken

    @total_time_taken.setter
    def total_time_taken(self, total_time_taken):
        """
        Sets the total_time_taken of this InlineResponse200DraftTimings.
        total_time_taken

        :param total_time_taken: The total_time_taken of this InlineResponse200DraftTimings.
        :type: int
        """

        self._total_time_taken = total_time_taken

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse200DraftTimings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
