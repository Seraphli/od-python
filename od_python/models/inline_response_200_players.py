# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays. Please keep request rate to approximately 1/s.  **Begining 4/22/2018, the OpenDota API will be limited to 50,000 free calls per month.** We'll be offering a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 17.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse200Players(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_id': 'int',
        'player_slot': 'int',
        'ability_upgrades_arr': 'list[int]',
        'ability_uses': 'object',
        'ability_targets': 'object',
        'damage_targets': 'object',
        'account_id': 'int',
        'actions': 'object',
        'additional_units': 'object',
        'assists': 'int',
        'backpack_0': 'int',
        'backpack_1': 'int',
        'backpack_2': 'int',
        'buyback_log': 'list[InlineResponse200BuybackLog]',
        'camps_stacked': 'int',
        'creeps_stacked': 'int',
        'damage': 'object',
        'damage_inflictor': 'object',
        'damage_inflictor_received': 'object',
        'damage_taken': 'object',
        'deaths': 'int',
        'denies': 'int',
        'dn_t': 'list[int]',
        'gold': 'int',
        'gold_per_min': 'int',
        'gold_reasons': 'object',
        'gold_spent': 'int',
        'gold_t': 'list[int]',
        'hero_damage': 'int',
        'hero_healing': 'int',
        'hero_hits': 'object',
        'hero_id': 'int',
        'item_0': 'int',
        'item_1': 'int',
        'item_2': 'int',
        'item_3': 'int',
        'item_4': 'int',
        'item_5': 'int',
        'item_uses': 'object',
        'kill_streaks': 'object',
        'killed': 'object',
        'killed_by': 'object',
        'kills': 'int',
        'kills_log': 'list[InlineResponse200KillsLog]',
        'lane_pos': 'object',
        'last_hits': 'int',
        'leaver_status': 'int',
        'level': 'int',
        'lh_t': 'list[int]',
        'life_state': 'object',
        'max_hero_hit': 'object',
        'multi_kills': 'object',
        'obs': 'object',
        'obs_left_log': 'list[object]',
        'obs_log': 'list[object]',
        'obs_placed': 'int',
        'party_id': 'int',
        'permanent_buffs': 'list[object]',
        'pings': 'int',
        'purchase': 'object',
        'purchase_log': 'list[InlineResponse200PurchaseLog]',
        'rune_pickups': 'int',
        'runes': 'dict(str, int)',
        'runes_log': 'list[InlineResponse200RunesLog]',
        'sen': 'object',
        'sen_left_log': 'list[object]',
        'sen_log': 'list[object]',
        'sen_placed': 'int',
        'stuns': 'float',
        'times': 'list[int]',
        'tower_damage': 'int',
        'xp_per_min': 'int',
        'xp_reasons': 'object',
        'xp_t': 'list[int]',
        'personaname': 'str',
        'name': 'str',
        'radiant_win': 'bool',
        'start_time': 'int',
        'duration': 'int',
        'cluster': 'int',
        'lobby_type': 'int',
        'game_mode': 'int',
        'patch': 'int',
        'region': 'int',
        'is_radiant': 'bool',
        'win': 'int',
        'lose': 'int',
        'total_gold': 'int',
        'total_xp': 'int',
        'kills_per_min': 'float',
        'kda': 'float',
        'abandons': 'int',
        'neutral_kills': 'int',
        'tower_kills': 'int',
        'courier_kills': 'int',
        'lane_kills': 'int',
        'hero_kills': 'int',
        'observer_kills': 'int',
        'sentry_kills': 'int',
        'roshan_kills': 'int',
        'necronomicon_kills': 'int',
        'ancient_kills': 'int',
        'buyback_count': 'int',
        'observer_uses': 'int',
        'sentry_uses': 'int',
        'lane_efficiency': 'float',
        'lane_efficiency_pct': 'float',
        'lane': 'int',
        'lane_role': 'int',
        'is_roaming': 'bool',
        'purchase_time': 'object',
        'first_purchase_time': 'object',
        'item_win': 'object',
        'item_usage': 'object',
        'purchase_tpscroll': 'object',
        'actions_per_min': 'int',
        'life_state_dead': 'int',
        'rank_tier': 'int',
        'cosmetics': 'list[int]',
        'benchmarks': 'object'
    }

    attribute_map = {
        'match_id': 'match_id',
        'player_slot': 'player_slot',
        'ability_upgrades_arr': 'ability_upgrades_arr',
        'ability_uses': 'ability_uses',
        'ability_targets': 'ability_targets',
        'damage_targets': 'damage_targets',
        'account_id': 'account_id',
        'actions': 'actions',
        'additional_units': 'additional_units',
        'assists': 'assists',
        'backpack_0': 'backpack_0',
        'backpack_1': 'backpack_1',
        'backpack_2': 'backpack_2',
        'buyback_log': 'buyback_log',
        'camps_stacked': 'camps_stacked',
        'creeps_stacked': 'creeps_stacked',
        'damage': 'damage',
        'damage_inflictor': 'damage_inflictor',
        'damage_inflictor_received': 'damage_inflictor_received',
        'damage_taken': 'damage_taken',
        'deaths': 'deaths',
        'denies': 'denies',
        'dn_t': 'dn_t',
        'gold': 'gold',
        'gold_per_min': 'gold_per_min',
        'gold_reasons': 'gold_reasons',
        'gold_spent': 'gold_spent',
        'gold_t': 'gold_t',
        'hero_damage': 'hero_damage',
        'hero_healing': 'hero_healing',
        'hero_hits': 'hero_hits',
        'hero_id': 'hero_id',
        'item_0': 'item_0',
        'item_1': 'item_1',
        'item_2': 'item_2',
        'item_3': 'item_3',
        'item_4': 'item_4',
        'item_5': 'item_5',
        'item_uses': 'item_uses',
        'kill_streaks': 'kill_streaks',
        'killed': 'killed',
        'killed_by': 'killed_by',
        'kills': 'kills',
        'kills_log': 'kills_log',
        'lane_pos': 'lane_pos',
        'last_hits': 'last_hits',
        'leaver_status': 'leaver_status',
        'level': 'level',
        'lh_t': 'lh_t',
        'life_state': 'life_state',
        'max_hero_hit': 'max_hero_hit',
        'multi_kills': 'multi_kills',
        'obs': 'obs',
        'obs_left_log': 'obs_left_log',
        'obs_log': 'obs_log',
        'obs_placed': 'obs_placed',
        'party_id': 'party_id',
        'permanent_buffs': 'permanent_buffs',
        'pings': 'pings',
        'purchase': 'purchase',
        'purchase_log': 'purchase_log',
        'rune_pickups': 'rune_pickups',
        'runes': 'runes',
        'runes_log': 'runes_log',
        'sen': 'sen',
        'sen_left_log': 'sen_left_log',
        'sen_log': 'sen_log',
        'sen_placed': 'sen_placed',
        'stuns': 'stuns',
        'times': 'times',
        'tower_damage': 'tower_damage',
        'xp_per_min': 'xp_per_min',
        'xp_reasons': 'xp_reasons',
        'xp_t': 'xp_t',
        'personaname': 'personaname',
        'name': 'name',
        'radiant_win': 'radiant_win',
        'start_time': 'start_time',
        'duration': 'duration',
        'cluster': 'cluster',
        'lobby_type': 'lobby_type',
        'game_mode': 'game_mode',
        'patch': 'patch',
        'region': 'region',
        'is_radiant': 'isRadiant',
        'win': 'win',
        'lose': 'lose',
        'total_gold': 'total_gold',
        'total_xp': 'total_xp',
        'kills_per_min': 'kills_per_min',
        'kda': 'kda',
        'abandons': 'abandons',
        'neutral_kills': 'neutral_kills',
        'tower_kills': 'tower_kills',
        'courier_kills': 'courier_kills',
        'lane_kills': 'lane_kills',
        'hero_kills': 'hero_kills',
        'observer_kills': 'observer_kills',
        'sentry_kills': 'sentry_kills',
        'roshan_kills': 'roshan_kills',
        'necronomicon_kills': 'necronomicon_kills',
        'ancient_kills': 'ancient_kills',
        'buyback_count': 'buyback_count',
        'observer_uses': 'observer_uses',
        'sentry_uses': 'sentry_uses',
        'lane_efficiency': 'lane_efficiency',
        'lane_efficiency_pct': 'lane_efficiency_pct',
        'lane': 'lane',
        'lane_role': 'lane_role',
        'is_roaming': 'is_roaming',
        'purchase_time': 'purchase_time',
        'first_purchase_time': 'first_purchase_time',
        'item_win': 'item_win',
        'item_usage': 'item_usage',
        'purchase_tpscroll': 'purchase_tpscroll',
        'actions_per_min': 'actions_per_min',
        'life_state_dead': 'life_state_dead',
        'rank_tier': 'rank_tier',
        'cosmetics': 'cosmetics',
        'benchmarks': 'benchmarks'
    }

    def __init__(self, match_id=None, player_slot=None, ability_upgrades_arr=None, ability_uses=None, ability_targets=None, damage_targets=None, account_id=None, actions=None, additional_units=None, assists=None, backpack_0=None, backpack_1=None, backpack_2=None, buyback_log=None, camps_stacked=None, creeps_stacked=None, damage=None, damage_inflictor=None, damage_inflictor_received=None, damage_taken=None, deaths=None, denies=None, dn_t=None, gold=None, gold_per_min=None, gold_reasons=None, gold_spent=None, gold_t=None, hero_damage=None, hero_healing=None, hero_hits=None, hero_id=None, item_0=None, item_1=None, item_2=None, item_3=None, item_4=None, item_5=None, item_uses=None, kill_streaks=None, killed=None, killed_by=None, kills=None, kills_log=None, lane_pos=None, last_hits=None, leaver_status=None, level=None, lh_t=None, life_state=None, max_hero_hit=None, multi_kills=None, obs=None, obs_left_log=None, obs_log=None, obs_placed=None, party_id=None, permanent_buffs=None, pings=None, purchase=None, purchase_log=None, rune_pickups=None, runes=None, runes_log=None, sen=None, sen_left_log=None, sen_log=None, sen_placed=None, stuns=None, times=None, tower_damage=None, xp_per_min=None, xp_reasons=None, xp_t=None, personaname=None, name=None, radiant_win=None, start_time=None, duration=None, cluster=None, lobby_type=None, game_mode=None, patch=None, region=None, is_radiant=None, win=None, lose=None, total_gold=None, total_xp=None, kills_per_min=None, kda=None, abandons=None, neutral_kills=None, tower_kills=None, courier_kills=None, lane_kills=None, hero_kills=None, observer_kills=None, sentry_kills=None, roshan_kills=None, necronomicon_kills=None, ancient_kills=None, buyback_count=None, observer_uses=None, sentry_uses=None, lane_efficiency=None, lane_efficiency_pct=None, lane=None, lane_role=None, is_roaming=None, purchase_time=None, first_purchase_time=None, item_win=None, item_usage=None, purchase_tpscroll=None, actions_per_min=None, life_state_dead=None, rank_tier=None, cosmetics=None, benchmarks=None):
        """
        InlineResponse200Players - a model defined in Swagger
        """

        self._match_id = None
        self._player_slot = None
        self._ability_upgrades_arr = None
        self._ability_uses = None
        self._ability_targets = None
        self._damage_targets = None
        self._account_id = None
        self._actions = None
        self._additional_units = None
        self._assists = None
        self._backpack_0 = None
        self._backpack_1 = None
        self._backpack_2 = None
        self._buyback_log = None
        self._camps_stacked = None
        self._creeps_stacked = None
        self._damage = None
        self._damage_inflictor = None
        self._damage_inflictor_received = None
        self._damage_taken = None
        self._deaths = None
        self._denies = None
        self._dn_t = None
        self._gold = None
        self._gold_per_min = None
        self._gold_reasons = None
        self._gold_spent = None
        self._gold_t = None
        self._hero_damage = None
        self._hero_healing = None
        self._hero_hits = None
        self._hero_id = None
        self._item_0 = None
        self._item_1 = None
        self._item_2 = None
        self._item_3 = None
        self._item_4 = None
        self._item_5 = None
        self._item_uses = None
        self._kill_streaks = None
        self._killed = None
        self._killed_by = None
        self._kills = None
        self._kills_log = None
        self._lane_pos = None
        self._last_hits = None
        self._leaver_status = None
        self._level = None
        self._lh_t = None
        self._life_state = None
        self._max_hero_hit = None
        self._multi_kills = None
        self._obs = None
        self._obs_left_log = None
        self._obs_log = None
        self._obs_placed = None
        self._party_id = None
        self._permanent_buffs = None
        self._pings = None
        self._purchase = None
        self._purchase_log = None
        self._rune_pickups = None
        self._runes = None
        self._runes_log = None
        self._sen = None
        self._sen_left_log = None
        self._sen_log = None
        self._sen_placed = None
        self._stuns = None
        self._times = None
        self._tower_damage = None
        self._xp_per_min = None
        self._xp_reasons = None
        self._xp_t = None
        self._personaname = None
        self._name = None
        self._radiant_win = None
        self._start_time = None
        self._duration = None
        self._cluster = None
        self._lobby_type = None
        self._game_mode = None
        self._patch = None
        self._region = None
        self._is_radiant = None
        self._win = None
        self._lose = None
        self._total_gold = None
        self._total_xp = None
        self._kills_per_min = None
        self._kda = None
        self._abandons = None
        self._neutral_kills = None
        self._tower_kills = None
        self._courier_kills = None
        self._lane_kills = None
        self._hero_kills = None
        self._observer_kills = None
        self._sentry_kills = None
        self._roshan_kills = None
        self._necronomicon_kills = None
        self._ancient_kills = None
        self._buyback_count = None
        self._observer_uses = None
        self._sentry_uses = None
        self._lane_efficiency = None
        self._lane_efficiency_pct = None
        self._lane = None
        self._lane_role = None
        self._is_roaming = None
        self._purchase_time = None
        self._first_purchase_time = None
        self._item_win = None
        self._item_usage = None
        self._purchase_tpscroll = None
        self._actions_per_min = None
        self._life_state_dead = None
        self._rank_tier = None
        self._cosmetics = None
        self._benchmarks = None

        if match_id is not None:
          self.match_id = match_id
        if player_slot is not None:
          self.player_slot = player_slot
        if ability_upgrades_arr is not None:
          self.ability_upgrades_arr = ability_upgrades_arr
        if ability_uses is not None:
          self.ability_uses = ability_uses
        if ability_targets is not None:
          self.ability_targets = ability_targets
        if damage_targets is not None:
          self.damage_targets = damage_targets
        if account_id is not None:
          self.account_id = account_id
        if actions is not None:
          self.actions = actions
        if additional_units is not None:
          self.additional_units = additional_units
        if assists is not None:
          self.assists = assists
        if backpack_0 is not None:
          self.backpack_0 = backpack_0
        if backpack_1 is not None:
          self.backpack_1 = backpack_1
        if backpack_2 is not None:
          self.backpack_2 = backpack_2
        if buyback_log is not None:
          self.buyback_log = buyback_log
        if camps_stacked is not None:
          self.camps_stacked = camps_stacked
        if creeps_stacked is not None:
          self.creeps_stacked = creeps_stacked
        if damage is not None:
          self.damage = damage
        if damage_inflictor is not None:
          self.damage_inflictor = damage_inflictor
        if damage_inflictor_received is not None:
          self.damage_inflictor_received = damage_inflictor_received
        if damage_taken is not None:
          self.damage_taken = damage_taken
        if deaths is not None:
          self.deaths = deaths
        if denies is not None:
          self.denies = denies
        if dn_t is not None:
          self.dn_t = dn_t
        if gold is not None:
          self.gold = gold
        if gold_per_min is not None:
          self.gold_per_min = gold_per_min
        if gold_reasons is not None:
          self.gold_reasons = gold_reasons
        if gold_spent is not None:
          self.gold_spent = gold_spent
        if gold_t is not None:
          self.gold_t = gold_t
        if hero_damage is not None:
          self.hero_damage = hero_damage
        if hero_healing is not None:
          self.hero_healing = hero_healing
        if hero_hits is not None:
          self.hero_hits = hero_hits
        if hero_id is not None:
          self.hero_id = hero_id
        if item_0 is not None:
          self.item_0 = item_0
        if item_1 is not None:
          self.item_1 = item_1
        if item_2 is not None:
          self.item_2 = item_2
        if item_3 is not None:
          self.item_3 = item_3
        if item_4 is not None:
          self.item_4 = item_4
        if item_5 is not None:
          self.item_5 = item_5
        if item_uses is not None:
          self.item_uses = item_uses
        if kill_streaks is not None:
          self.kill_streaks = kill_streaks
        if killed is not None:
          self.killed = killed
        if killed_by is not None:
          self.killed_by = killed_by
        if kills is not None:
          self.kills = kills
        if kills_log is not None:
          self.kills_log = kills_log
        if lane_pos is not None:
          self.lane_pos = lane_pos
        if last_hits is not None:
          self.last_hits = last_hits
        if leaver_status is not None:
          self.leaver_status = leaver_status
        if level is not None:
          self.level = level
        if lh_t is not None:
          self.lh_t = lh_t
        if life_state is not None:
          self.life_state = life_state
        if max_hero_hit is not None:
          self.max_hero_hit = max_hero_hit
        if multi_kills is not None:
          self.multi_kills = multi_kills
        if obs is not None:
          self.obs = obs
        if obs_left_log is not None:
          self.obs_left_log = obs_left_log
        if obs_log is not None:
          self.obs_log = obs_log
        if obs_placed is not None:
          self.obs_placed = obs_placed
        if party_id is not None:
          self.party_id = party_id
        if permanent_buffs is not None:
          self.permanent_buffs = permanent_buffs
        if pings is not None:
          self.pings = pings
        if purchase is not None:
          self.purchase = purchase
        if purchase_log is not None:
          self.purchase_log = purchase_log
        if rune_pickups is not None:
          self.rune_pickups = rune_pickups
        if runes is not None:
          self.runes = runes
        if runes_log is not None:
          self.runes_log = runes_log
        if sen is not None:
          self.sen = sen
        if sen_left_log is not None:
          self.sen_left_log = sen_left_log
        if sen_log is not None:
          self.sen_log = sen_log
        if sen_placed is not None:
          self.sen_placed = sen_placed
        if stuns is not None:
          self.stuns = stuns
        if times is not None:
          self.times = times
        if tower_damage is not None:
          self.tower_damage = tower_damage
        if xp_per_min is not None:
          self.xp_per_min = xp_per_min
        if xp_reasons is not None:
          self.xp_reasons = xp_reasons
        if xp_t is not None:
          self.xp_t = xp_t
        if personaname is not None:
          self.personaname = personaname
        if name is not None:
          self.name = name
        if radiant_win is not None:
          self.radiant_win = radiant_win
        if start_time is not None:
          self.start_time = start_time
        if duration is not None:
          self.duration = duration
        if cluster is not None:
          self.cluster = cluster
        if lobby_type is not None:
          self.lobby_type = lobby_type
        if game_mode is not None:
          self.game_mode = game_mode
        if patch is not None:
          self.patch = patch
        if region is not None:
          self.region = region
        if is_radiant is not None:
          self.is_radiant = is_radiant
        if win is not None:
          self.win = win
        if lose is not None:
          self.lose = lose
        if total_gold is not None:
          self.total_gold = total_gold
        if total_xp is not None:
          self.total_xp = total_xp
        if kills_per_min is not None:
          self.kills_per_min = kills_per_min
        if kda is not None:
          self.kda = kda
        if abandons is not None:
          self.abandons = abandons
        if neutral_kills is not None:
          self.neutral_kills = neutral_kills
        if tower_kills is not None:
          self.tower_kills = tower_kills
        if courier_kills is not None:
          self.courier_kills = courier_kills
        if lane_kills is not None:
          self.lane_kills = lane_kills
        if hero_kills is not None:
          self.hero_kills = hero_kills
        if observer_kills is not None:
          self.observer_kills = observer_kills
        if sentry_kills is not None:
          self.sentry_kills = sentry_kills
        if roshan_kills is not None:
          self.roshan_kills = roshan_kills
        if necronomicon_kills is not None:
          self.necronomicon_kills = necronomicon_kills
        if ancient_kills is not None:
          self.ancient_kills = ancient_kills
        if buyback_count is not None:
          self.buyback_count = buyback_count
        if observer_uses is not None:
          self.observer_uses = observer_uses
        if sentry_uses is not None:
          self.sentry_uses = sentry_uses
        if lane_efficiency is not None:
          self.lane_efficiency = lane_efficiency
        if lane_efficiency_pct is not None:
          self.lane_efficiency_pct = lane_efficiency_pct
        if lane is not None:
          self.lane = lane
        if lane_role is not None:
          self.lane_role = lane_role
        if is_roaming is not None:
          self.is_roaming = is_roaming
        if purchase_time is not None:
          self.purchase_time = purchase_time
        if first_purchase_time is not None:
          self.first_purchase_time = first_purchase_time
        if item_win is not None:
          self.item_win = item_win
        if item_usage is not None:
          self.item_usage = item_usage
        if purchase_tpscroll is not None:
          self.purchase_tpscroll = purchase_tpscroll
        if actions_per_min is not None:
          self.actions_per_min = actions_per_min
        if life_state_dead is not None:
          self.life_state_dead = life_state_dead
        if rank_tier is not None:
          self.rank_tier = rank_tier
        if cosmetics is not None:
          self.cosmetics = cosmetics
        if benchmarks is not None:
          self.benchmarks = benchmarks

    @property
    def match_id(self):
        """
        Gets the match_id of this InlineResponse200Players.
        Match ID

        :return: The match_id of this InlineResponse200Players.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """
        Sets the match_id of this InlineResponse200Players.
        Match ID

        :param match_id: The match_id of this InlineResponse200Players.
        :type: int
        """

        self._match_id = match_id

    @property
    def player_slot(self):
        """
        Gets the player_slot of this InlineResponse200Players.
        Which slot the player is in. 0-127 are Radiant, 128-255 are Dire

        :return: The player_slot of this InlineResponse200Players.
        :rtype: int
        """
        return self._player_slot

    @player_slot.setter
    def player_slot(self, player_slot):
        """
        Sets the player_slot of this InlineResponse200Players.
        Which slot the player is in. 0-127 are Radiant, 128-255 are Dire

        :param player_slot: The player_slot of this InlineResponse200Players.
        :type: int
        """

        self._player_slot = player_slot

    @property
    def ability_upgrades_arr(self):
        """
        Gets the ability_upgrades_arr of this InlineResponse200Players.
        An array describing how abilities were upgraded

        :return: The ability_upgrades_arr of this InlineResponse200Players.
        :rtype: list[int]
        """
        return self._ability_upgrades_arr

    @ability_upgrades_arr.setter
    def ability_upgrades_arr(self, ability_upgrades_arr):
        """
        Sets the ability_upgrades_arr of this InlineResponse200Players.
        An array describing how abilities were upgraded

        :param ability_upgrades_arr: The ability_upgrades_arr of this InlineResponse200Players.
        :type: list[int]
        """

        self._ability_upgrades_arr = ability_upgrades_arr

    @property
    def ability_uses(self):
        """
        Gets the ability_uses of this InlineResponse200Players.
        Object containing information on how many times the played used their abilities

        :return: The ability_uses of this InlineResponse200Players.
        :rtype: object
        """
        return self._ability_uses

    @ability_uses.setter
    def ability_uses(self, ability_uses):
        """
        Sets the ability_uses of this InlineResponse200Players.
        Object containing information on how many times the played used their abilities

        :param ability_uses: The ability_uses of this InlineResponse200Players.
        :type: object
        """

        self._ability_uses = ability_uses

    @property
    def ability_targets(self):
        """
        Gets the ability_targets of this InlineResponse200Players.
        Object containing information on who the player used their abilities on

        :return: The ability_targets of this InlineResponse200Players.
        :rtype: object
        """
        return self._ability_targets

    @ability_targets.setter
    def ability_targets(self, ability_targets):
        """
        Sets the ability_targets of this InlineResponse200Players.
        Object containing information on who the player used their abilities on

        :param ability_targets: The ability_targets of this InlineResponse200Players.
        :type: object
        """

        self._ability_targets = ability_targets

    @property
    def damage_targets(self):
        """
        Gets the damage_targets of this InlineResponse200Players.
        Object containing information on how and how much damage the player dealt to other heroes

        :return: The damage_targets of this InlineResponse200Players.
        :rtype: object
        """
        return self._damage_targets

    @damage_targets.setter
    def damage_targets(self, damage_targets):
        """
        Sets the damage_targets of this InlineResponse200Players.
        Object containing information on how and how much damage the player dealt to other heroes

        :param damage_targets: The damage_targets of this InlineResponse200Players.
        :type: object
        """

        self._damage_targets = damage_targets

    @property
    def account_id(self):
        """
        Gets the account_id of this InlineResponse200Players.
        account_id

        :return: The account_id of this InlineResponse200Players.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this InlineResponse200Players.
        account_id

        :param account_id: The account_id of this InlineResponse200Players.
        :type: int
        """

        self._account_id = account_id

    @property
    def actions(self):
        """
        Gets the actions of this InlineResponse200Players.
        Object containing information on how many and what type of actions the player issued to their hero

        :return: The actions of this InlineResponse200Players.
        :rtype: object
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this InlineResponse200Players.
        Object containing information on how many and what type of actions the player issued to their hero

        :param actions: The actions of this InlineResponse200Players.
        :type: object
        """

        self._actions = actions

    @property
    def additional_units(self):
        """
        Gets the additional_units of this InlineResponse200Players.
        Object containing information on additional units the player had under their control

        :return: The additional_units of this InlineResponse200Players.
        :rtype: object
        """
        return self._additional_units

    @additional_units.setter
    def additional_units(self, additional_units):
        """
        Sets the additional_units of this InlineResponse200Players.
        Object containing information on additional units the player had under their control

        :param additional_units: The additional_units of this InlineResponse200Players.
        :type: object
        """

        self._additional_units = additional_units

    @property
    def assists(self):
        """
        Gets the assists of this InlineResponse200Players.
        Number of assists the player had

        :return: The assists of this InlineResponse200Players.
        :rtype: int
        """
        return self._assists

    @assists.setter
    def assists(self, assists):
        """
        Sets the assists of this InlineResponse200Players.
        Number of assists the player had

        :param assists: The assists of this InlineResponse200Players.
        :type: int
        """

        self._assists = assists

    @property
    def backpack_0(self):
        """
        Gets the backpack_0 of this InlineResponse200Players.
        Item in backpack slot 0

        :return: The backpack_0 of this InlineResponse200Players.
        :rtype: int
        """
        return self._backpack_0

    @backpack_0.setter
    def backpack_0(self, backpack_0):
        """
        Sets the backpack_0 of this InlineResponse200Players.
        Item in backpack slot 0

        :param backpack_0: The backpack_0 of this InlineResponse200Players.
        :type: int
        """

        self._backpack_0 = backpack_0

    @property
    def backpack_1(self):
        """
        Gets the backpack_1 of this InlineResponse200Players.
        Item in backpack slot 1

        :return: The backpack_1 of this InlineResponse200Players.
        :rtype: int
        """
        return self._backpack_1

    @backpack_1.setter
    def backpack_1(self, backpack_1):
        """
        Sets the backpack_1 of this InlineResponse200Players.
        Item in backpack slot 1

        :param backpack_1: The backpack_1 of this InlineResponse200Players.
        :type: int
        """

        self._backpack_1 = backpack_1

    @property
    def backpack_2(self):
        """
        Gets the backpack_2 of this InlineResponse200Players.
        Item in backpack slot 2

        :return: The backpack_2 of this InlineResponse200Players.
        :rtype: int
        """
        return self._backpack_2

    @backpack_2.setter
    def backpack_2(self, backpack_2):
        """
        Sets the backpack_2 of this InlineResponse200Players.
        Item in backpack slot 2

        :param backpack_2: The backpack_2 of this InlineResponse200Players.
        :type: int
        """

        self._backpack_2 = backpack_2

    @property
    def buyback_log(self):
        """
        Gets the buyback_log of this InlineResponse200Players.
        Array containing information about buybacks

        :return: The buyback_log of this InlineResponse200Players.
        :rtype: list[InlineResponse200BuybackLog]
        """
        return self._buyback_log

    @buyback_log.setter
    def buyback_log(self, buyback_log):
        """
        Sets the buyback_log of this InlineResponse200Players.
        Array containing information about buybacks

        :param buyback_log: The buyback_log of this InlineResponse200Players.
        :type: list[InlineResponse200BuybackLog]
        """

        self._buyback_log = buyback_log

    @property
    def camps_stacked(self):
        """
        Gets the camps_stacked of this InlineResponse200Players.
        Number of camps stacked

        :return: The camps_stacked of this InlineResponse200Players.
        :rtype: int
        """
        return self._camps_stacked

    @camps_stacked.setter
    def camps_stacked(self, camps_stacked):
        """
        Sets the camps_stacked of this InlineResponse200Players.
        Number of camps stacked

        :param camps_stacked: The camps_stacked of this InlineResponse200Players.
        :type: int
        """

        self._camps_stacked = camps_stacked

    @property
    def creeps_stacked(self):
        """
        Gets the creeps_stacked of this InlineResponse200Players.
        Number of creeps stacked

        :return: The creeps_stacked of this InlineResponse200Players.
        :rtype: int
        """
        return self._creeps_stacked

    @creeps_stacked.setter
    def creeps_stacked(self, creeps_stacked):
        """
        Sets the creeps_stacked of this InlineResponse200Players.
        Number of creeps stacked

        :param creeps_stacked: The creeps_stacked of this InlineResponse200Players.
        :type: int
        """

        self._creeps_stacked = creeps_stacked

    @property
    def damage(self):
        """
        Gets the damage of this InlineResponse200Players.
        Object containing information about damage dealt by the player to different units

        :return: The damage of this InlineResponse200Players.
        :rtype: object
        """
        return self._damage

    @damage.setter
    def damage(self, damage):
        """
        Sets the damage of this InlineResponse200Players.
        Object containing information about damage dealt by the player to different units

        :param damage: The damage of this InlineResponse200Players.
        :type: object
        """

        self._damage = damage

    @property
    def damage_inflictor(self):
        """
        Gets the damage_inflictor of this InlineResponse200Players.
        Object containing information about about the sources of this player's damage to heroes

        :return: The damage_inflictor of this InlineResponse200Players.
        :rtype: object
        """
        return self._damage_inflictor

    @damage_inflictor.setter
    def damage_inflictor(self, damage_inflictor):
        """
        Sets the damage_inflictor of this InlineResponse200Players.
        Object containing information about about the sources of this player's damage to heroes

        :param damage_inflictor: The damage_inflictor of this InlineResponse200Players.
        :type: object
        """

        self._damage_inflictor = damage_inflictor

    @property
    def damage_inflictor_received(self):
        """
        Gets the damage_inflictor_received of this InlineResponse200Players.
        Object containing information about the sources of damage received by this player from heroes

        :return: The damage_inflictor_received of this InlineResponse200Players.
        :rtype: object
        """
        return self._damage_inflictor_received

    @damage_inflictor_received.setter
    def damage_inflictor_received(self, damage_inflictor_received):
        """
        Sets the damage_inflictor_received of this InlineResponse200Players.
        Object containing information about the sources of damage received by this player from heroes

        :param damage_inflictor_received: The damage_inflictor_received of this InlineResponse200Players.
        :type: object
        """

        self._damage_inflictor_received = damage_inflictor_received

    @property
    def damage_taken(self):
        """
        Gets the damage_taken of this InlineResponse200Players.
        Object containing information about from whom the player took damage

        :return: The damage_taken of this InlineResponse200Players.
        :rtype: object
        """
        return self._damage_taken

    @damage_taken.setter
    def damage_taken(self, damage_taken):
        """
        Sets the damage_taken of this InlineResponse200Players.
        Object containing information about from whom the player took damage

        :param damage_taken: The damage_taken of this InlineResponse200Players.
        :type: object
        """

        self._damage_taken = damage_taken

    @property
    def deaths(self):
        """
        Gets the deaths of this InlineResponse200Players.
        Number of deaths

        :return: The deaths of this InlineResponse200Players.
        :rtype: int
        """
        return self._deaths

    @deaths.setter
    def deaths(self, deaths):
        """
        Sets the deaths of this InlineResponse200Players.
        Number of deaths

        :param deaths: The deaths of this InlineResponse200Players.
        :type: int
        """

        self._deaths = deaths

    @property
    def denies(self):
        """
        Gets the denies of this InlineResponse200Players.
        Number of denies

        :return: The denies of this InlineResponse200Players.
        :rtype: int
        """
        return self._denies

    @denies.setter
    def denies(self, denies):
        """
        Sets the denies of this InlineResponse200Players.
        Number of denies

        :param denies: The denies of this InlineResponse200Players.
        :type: int
        """

        self._denies = denies

    @property
    def dn_t(self):
        """
        Gets the dn_t of this InlineResponse200Players.
        Array containing number of denies at different times of the match

        :return: The dn_t of this InlineResponse200Players.
        :rtype: list[int]
        """
        return self._dn_t

    @dn_t.setter
    def dn_t(self, dn_t):
        """
        Sets the dn_t of this InlineResponse200Players.
        Array containing number of denies at different times of the match

        :param dn_t: The dn_t of this InlineResponse200Players.
        :type: list[int]
        """

        self._dn_t = dn_t

    @property
    def gold(self):
        """
        Gets the gold of this InlineResponse200Players.
        Gold at the end of the game

        :return: The gold of this InlineResponse200Players.
        :rtype: int
        """
        return self._gold

    @gold.setter
    def gold(self, gold):
        """
        Sets the gold of this InlineResponse200Players.
        Gold at the end of the game

        :param gold: The gold of this InlineResponse200Players.
        :type: int
        """

        self._gold = gold

    @property
    def gold_per_min(self):
        """
        Gets the gold_per_min of this InlineResponse200Players.
        Gold Per Minute obtained by this player

        :return: The gold_per_min of this InlineResponse200Players.
        :rtype: int
        """
        return self._gold_per_min

    @gold_per_min.setter
    def gold_per_min(self, gold_per_min):
        """
        Sets the gold_per_min of this InlineResponse200Players.
        Gold Per Minute obtained by this player

        :param gold_per_min: The gold_per_min of this InlineResponse200Players.
        :type: int
        """

        self._gold_per_min = gold_per_min

    @property
    def gold_reasons(self):
        """
        Gets the gold_reasons of this InlineResponse200Players.
        Object containing information on how the player gainined gold over the course of the match

        :return: The gold_reasons of this InlineResponse200Players.
        :rtype: object
        """
        return self._gold_reasons

    @gold_reasons.setter
    def gold_reasons(self, gold_reasons):
        """
        Sets the gold_reasons of this InlineResponse200Players.
        Object containing information on how the player gainined gold over the course of the match

        :param gold_reasons: The gold_reasons of this InlineResponse200Players.
        :type: object
        """

        self._gold_reasons = gold_reasons

    @property
    def gold_spent(self):
        """
        Gets the gold_spent of this InlineResponse200Players.
        How much gold the player spent

        :return: The gold_spent of this InlineResponse200Players.
        :rtype: int
        """
        return self._gold_spent

    @gold_spent.setter
    def gold_spent(self, gold_spent):
        """
        Sets the gold_spent of this InlineResponse200Players.
        How much gold the player spent

        :param gold_spent: The gold_spent of this InlineResponse200Players.
        :type: int
        """

        self._gold_spent = gold_spent

    @property
    def gold_t(self):
        """
        Gets the gold_t of this InlineResponse200Players.
        Array containing total gold at different times of the match

        :return: The gold_t of this InlineResponse200Players.
        :rtype: list[int]
        """
        return self._gold_t

    @gold_t.setter
    def gold_t(self, gold_t):
        """
        Sets the gold_t of this InlineResponse200Players.
        Array containing total gold at different times of the match

        :param gold_t: The gold_t of this InlineResponse200Players.
        :type: list[int]
        """

        self._gold_t = gold_t

    @property
    def hero_damage(self):
        """
        Gets the hero_damage of this InlineResponse200Players.
        Hero Damage Dealt

        :return: The hero_damage of this InlineResponse200Players.
        :rtype: int
        """
        return self._hero_damage

    @hero_damage.setter
    def hero_damage(self, hero_damage):
        """
        Sets the hero_damage of this InlineResponse200Players.
        Hero Damage Dealt

        :param hero_damage: The hero_damage of this InlineResponse200Players.
        :type: int
        """

        self._hero_damage = hero_damage

    @property
    def hero_healing(self):
        """
        Gets the hero_healing of this InlineResponse200Players.
        Hero Healing Done

        :return: The hero_healing of this InlineResponse200Players.
        :rtype: int
        """
        return self._hero_healing

    @hero_healing.setter
    def hero_healing(self, hero_healing):
        """
        Sets the hero_healing of this InlineResponse200Players.
        Hero Healing Done

        :param hero_healing: The hero_healing of this InlineResponse200Players.
        :type: int
        """

        self._hero_healing = hero_healing

    @property
    def hero_hits(self):
        """
        Gets the hero_hits of this InlineResponse200Players.
        Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors

        :return: The hero_hits of this InlineResponse200Players.
        :rtype: object
        """
        return self._hero_hits

    @hero_hits.setter
    def hero_hits(self, hero_hits):
        """
        Sets the hero_hits of this InlineResponse200Players.
        Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors

        :param hero_hits: The hero_hits of this InlineResponse200Players.
        :type: object
        """

        self._hero_hits = hero_hits

    @property
    def hero_id(self):
        """
        Gets the hero_id of this InlineResponse200Players.

        :return: The hero_id of this InlineResponse200Players.
        :rtype: int
        """
        return self._hero_id

    @hero_id.setter
    def hero_id(self, hero_id):
        """
        Sets the hero_id of this InlineResponse200Players.

        :param hero_id: The hero_id of this InlineResponse200Players.
        :type: int
        """

        self._hero_id = hero_id

    @property
    def item_0(self):
        """
        Gets the item_0 of this InlineResponse200Players.
        Item in the player's first slot

        :return: The item_0 of this InlineResponse200Players.
        :rtype: int
        """
        return self._item_0

    @item_0.setter
    def item_0(self, item_0):
        """
        Sets the item_0 of this InlineResponse200Players.
        Item in the player's first slot

        :param item_0: The item_0 of this InlineResponse200Players.
        :type: int
        """

        self._item_0 = item_0

    @property
    def item_1(self):
        """
        Gets the item_1 of this InlineResponse200Players.
        Item in the player's second slot

        :return: The item_1 of this InlineResponse200Players.
        :rtype: int
        """
        return self._item_1

    @item_1.setter
    def item_1(self, item_1):
        """
        Sets the item_1 of this InlineResponse200Players.
        Item in the player's second slot

        :param item_1: The item_1 of this InlineResponse200Players.
        :type: int
        """

        self._item_1 = item_1

    @property
    def item_2(self):
        """
        Gets the item_2 of this InlineResponse200Players.
        Item in the player's third slot

        :return: The item_2 of this InlineResponse200Players.
        :rtype: int
        """
        return self._item_2

    @item_2.setter
    def item_2(self, item_2):
        """
        Sets the item_2 of this InlineResponse200Players.
        Item in the player's third slot

        :param item_2: The item_2 of this InlineResponse200Players.
        :type: int
        """

        self._item_2 = item_2

    @property
    def item_3(self):
        """
        Gets the item_3 of this InlineResponse200Players.
        Item in the player's fourth slot

        :return: The item_3 of this InlineResponse200Players.
        :rtype: int
        """
        return self._item_3

    @item_3.setter
    def item_3(self, item_3):
        """
        Sets the item_3 of this InlineResponse200Players.
        Item in the player's fourth slot

        :param item_3: The item_3 of this InlineResponse200Players.
        :type: int
        """

        self._item_3 = item_3

    @property
    def item_4(self):
        """
        Gets the item_4 of this InlineResponse200Players.
        Item in the player's fifth slot

        :return: The item_4 of this InlineResponse200Players.
        :rtype: int
        """
        return self._item_4

    @item_4.setter
    def item_4(self, item_4):
        """
        Sets the item_4 of this InlineResponse200Players.
        Item in the player's fifth slot

        :param item_4: The item_4 of this InlineResponse200Players.
        :type: int
        """

        self._item_4 = item_4

    @property
    def item_5(self):
        """
        Gets the item_5 of this InlineResponse200Players.
        Item in the player's sixth slot

        :return: The item_5 of this InlineResponse200Players.
        :rtype: int
        """
        return self._item_5

    @item_5.setter
    def item_5(self, item_5):
        """
        Sets the item_5 of this InlineResponse200Players.
        Item in the player's sixth slot

        :param item_5: The item_5 of this InlineResponse200Players.
        :type: int
        """

        self._item_5 = item_5

    @property
    def item_uses(self):
        """
        Gets the item_uses of this InlineResponse200Players.
        Object containing information about how many times a player used items

        :return: The item_uses of this InlineResponse200Players.
        :rtype: object
        """
        return self._item_uses

    @item_uses.setter
    def item_uses(self, item_uses):
        """
        Sets the item_uses of this InlineResponse200Players.
        Object containing information about how many times a player used items

        :param item_uses: The item_uses of this InlineResponse200Players.
        :type: object
        """

        self._item_uses = item_uses

    @property
    def kill_streaks(self):
        """
        Gets the kill_streaks of this InlineResponse200Players.
        Object containing information about the player's killstreaks

        :return: The kill_streaks of this InlineResponse200Players.
        :rtype: object
        """
        return self._kill_streaks

    @kill_streaks.setter
    def kill_streaks(self, kill_streaks):
        """
        Sets the kill_streaks of this InlineResponse200Players.
        Object containing information about the player's killstreaks

        :param kill_streaks: The kill_streaks of this InlineResponse200Players.
        :type: object
        """

        self._kill_streaks = kill_streaks

    @property
    def killed(self):
        """
        Gets the killed of this InlineResponse200Players.
        Object containing information about what units the player killed

        :return: The killed of this InlineResponse200Players.
        :rtype: object
        """
        return self._killed

    @killed.setter
    def killed(self, killed):
        """
        Sets the killed of this InlineResponse200Players.
        Object containing information about what units the player killed

        :param killed: The killed of this InlineResponse200Players.
        :type: object
        """

        self._killed = killed

    @property
    def killed_by(self):
        """
        Gets the killed_by of this InlineResponse200Players.
        Object containing information about who killed the player

        :return: The killed_by of this InlineResponse200Players.
        :rtype: object
        """
        return self._killed_by

    @killed_by.setter
    def killed_by(self, killed_by):
        """
        Sets the killed_by of this InlineResponse200Players.
        Object containing information about who killed the player

        :param killed_by: The killed_by of this InlineResponse200Players.
        :type: object
        """

        self._killed_by = killed_by

    @property
    def kills(self):
        """
        Gets the kills of this InlineResponse200Players.
        Number of kills

        :return: The kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """
        Sets the kills of this InlineResponse200Players.
        Number of kills

        :param kills: The kills of this InlineResponse200Players.
        :type: int
        """

        self._kills = kills

    @property
    def kills_log(self):
        """
        Gets the kills_log of this InlineResponse200Players.
        Array containing information on which hero the player killed at what time

        :return: The kills_log of this InlineResponse200Players.
        :rtype: list[InlineResponse200KillsLog]
        """
        return self._kills_log

    @kills_log.setter
    def kills_log(self, kills_log):
        """
        Sets the kills_log of this InlineResponse200Players.
        Array containing information on which hero the player killed at what time

        :param kills_log: The kills_log of this InlineResponse200Players.
        :type: list[InlineResponse200KillsLog]
        """

        self._kills_log = kills_log

    @property
    def lane_pos(self):
        """
        Gets the lane_pos of this InlineResponse200Players.
        Object containing information on lane position

        :return: The lane_pos of this InlineResponse200Players.
        :rtype: object
        """
        return self._lane_pos

    @lane_pos.setter
    def lane_pos(self, lane_pos):
        """
        Sets the lane_pos of this InlineResponse200Players.
        Object containing information on lane position

        :param lane_pos: The lane_pos of this InlineResponse200Players.
        :type: object
        """

        self._lane_pos = lane_pos

    @property
    def last_hits(self):
        """
        Gets the last_hits of this InlineResponse200Players.
        Number of last hits

        :return: The last_hits of this InlineResponse200Players.
        :rtype: int
        """
        return self._last_hits

    @last_hits.setter
    def last_hits(self, last_hits):
        """
        Sets the last_hits of this InlineResponse200Players.
        Number of last hits

        :param last_hits: The last_hits of this InlineResponse200Players.
        :type: int
        """

        self._last_hits = last_hits

    @property
    def leaver_status(self):
        """
        Gets the leaver_status of this InlineResponse200Players.
        Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned

        :return: The leaver_status of this InlineResponse200Players.
        :rtype: int
        """
        return self._leaver_status

    @leaver_status.setter
    def leaver_status(self, leaver_status):
        """
        Sets the leaver_status of this InlineResponse200Players.
        Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned

        :param leaver_status: The leaver_status of this InlineResponse200Players.
        :type: int
        """

        self._leaver_status = leaver_status

    @property
    def level(self):
        """
        Gets the level of this InlineResponse200Players.
        Level at the end of the game

        :return: The level of this InlineResponse200Players.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this InlineResponse200Players.
        Level at the end of the game

        :param level: The level of this InlineResponse200Players.
        :type: int
        """

        self._level = level

    @property
    def lh_t(self):
        """
        Gets the lh_t of this InlineResponse200Players.
        Array describing last hits at each minute in the game

        :return: The lh_t of this InlineResponse200Players.
        :rtype: list[int]
        """
        return self._lh_t

    @lh_t.setter
    def lh_t(self, lh_t):
        """
        Sets the lh_t of this InlineResponse200Players.
        Array describing last hits at each minute in the game

        :param lh_t: The lh_t of this InlineResponse200Players.
        :type: list[int]
        """

        self._lh_t = lh_t

    @property
    def life_state(self):
        """
        Gets the life_state of this InlineResponse200Players.
        life_state

        :return: The life_state of this InlineResponse200Players.
        :rtype: object
        """
        return self._life_state

    @life_state.setter
    def life_state(self, life_state):
        """
        Sets the life_state of this InlineResponse200Players.
        life_state

        :param life_state: The life_state of this InlineResponse200Players.
        :type: object
        """

        self._life_state = life_state

    @property
    def max_hero_hit(self):
        """
        Gets the max_hero_hit of this InlineResponse200Players.
        Object with information on the highest damage instance the player inflicted

        :return: The max_hero_hit of this InlineResponse200Players.
        :rtype: object
        """
        return self._max_hero_hit

    @max_hero_hit.setter
    def max_hero_hit(self, max_hero_hit):
        """
        Sets the max_hero_hit of this InlineResponse200Players.
        Object with information on the highest damage instance the player inflicted

        :param max_hero_hit: The max_hero_hit of this InlineResponse200Players.
        :type: object
        """

        self._max_hero_hit = max_hero_hit

    @property
    def multi_kills(self):
        """
        Gets the multi_kills of this InlineResponse200Players.
        Object with information on the number of the number of multikills the player had

        :return: The multi_kills of this InlineResponse200Players.
        :rtype: object
        """
        return self._multi_kills

    @multi_kills.setter
    def multi_kills(self, multi_kills):
        """
        Sets the multi_kills of this InlineResponse200Players.
        Object with information on the number of the number of multikills the player had

        :param multi_kills: The multi_kills of this InlineResponse200Players.
        :type: object
        """

        self._multi_kills = multi_kills

    @property
    def obs(self):
        """
        Gets the obs of this InlineResponse200Players.
        Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192.

        :return: The obs of this InlineResponse200Players.
        :rtype: object
        """
        return self._obs

    @obs.setter
    def obs(self, obs):
        """
        Sets the obs of this InlineResponse200Players.
        Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192.

        :param obs: The obs of this InlineResponse200Players.
        :type: object
        """

        self._obs = obs

    @property
    def obs_left_log(self):
        """
        Gets the obs_left_log of this InlineResponse200Players.
        obs_left_log

        :return: The obs_left_log of this InlineResponse200Players.
        :rtype: list[object]
        """
        return self._obs_left_log

    @obs_left_log.setter
    def obs_left_log(self, obs_left_log):
        """
        Sets the obs_left_log of this InlineResponse200Players.
        obs_left_log

        :param obs_left_log: The obs_left_log of this InlineResponse200Players.
        :type: list[object]
        """

        self._obs_left_log = obs_left_log

    @property
    def obs_log(self):
        """
        Gets the obs_log of this InlineResponse200Players.
        Object containing information on when and where the player placed observer wards

        :return: The obs_log of this InlineResponse200Players.
        :rtype: list[object]
        """
        return self._obs_log

    @obs_log.setter
    def obs_log(self, obs_log):
        """
        Sets the obs_log of this InlineResponse200Players.
        Object containing information on when and where the player placed observer wards

        :param obs_log: The obs_log of this InlineResponse200Players.
        :type: list[object]
        """

        self._obs_log = obs_log

    @property
    def obs_placed(self):
        """
        Gets the obs_placed of this InlineResponse200Players.
        Total number of observer wards placed

        :return: The obs_placed of this InlineResponse200Players.
        :rtype: int
        """
        return self._obs_placed

    @obs_placed.setter
    def obs_placed(self, obs_placed):
        """
        Sets the obs_placed of this InlineResponse200Players.
        Total number of observer wards placed

        :param obs_placed: The obs_placed of this InlineResponse200Players.
        :type: int
        """

        self._obs_placed = obs_placed

    @property
    def party_id(self):
        """
        Gets the party_id of this InlineResponse200Players.
        party_id

        :return: The party_id of this InlineResponse200Players.
        :rtype: int
        """
        return self._party_id

    @party_id.setter
    def party_id(self, party_id):
        """
        Sets the party_id of this InlineResponse200Players.
        party_id

        :param party_id: The party_id of this InlineResponse200Players.
        :type: int
        """

        self._party_id = party_id

    @property
    def permanent_buffs(self):
        """
        Gets the permanent_buffs of this InlineResponse200Players.
        Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json

        :return: The permanent_buffs of this InlineResponse200Players.
        :rtype: list[object]
        """
        return self._permanent_buffs

    @permanent_buffs.setter
    def permanent_buffs(self, permanent_buffs):
        """
        Sets the permanent_buffs of this InlineResponse200Players.
        Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json

        :param permanent_buffs: The permanent_buffs of this InlineResponse200Players.
        :type: list[object]
        """

        self._permanent_buffs = permanent_buffs

    @property
    def pings(self):
        """
        Gets the pings of this InlineResponse200Players.
        Total number of pings

        :return: The pings of this InlineResponse200Players.
        :rtype: int
        """
        return self._pings

    @pings.setter
    def pings(self, pings):
        """
        Sets the pings of this InlineResponse200Players.
        Total number of pings

        :param pings: The pings of this InlineResponse200Players.
        :type: int
        """

        self._pings = pings

    @property
    def purchase(self):
        """
        Gets the purchase of this InlineResponse200Players.
        Object containing information on the items the player purchased

        :return: The purchase of this InlineResponse200Players.
        :rtype: object
        """
        return self._purchase

    @purchase.setter
    def purchase(self, purchase):
        """
        Sets the purchase of this InlineResponse200Players.
        Object containing information on the items the player purchased

        :param purchase: The purchase of this InlineResponse200Players.
        :type: object
        """

        self._purchase = purchase

    @property
    def purchase_log(self):
        """
        Gets the purchase_log of this InlineResponse200Players.
        Object containing information on when items were purchased

        :return: The purchase_log of this InlineResponse200Players.
        :rtype: list[InlineResponse200PurchaseLog]
        """
        return self._purchase_log

    @purchase_log.setter
    def purchase_log(self, purchase_log):
        """
        Sets the purchase_log of this InlineResponse200Players.
        Object containing information on when items were purchased

        :param purchase_log: The purchase_log of this InlineResponse200Players.
        :type: list[InlineResponse200PurchaseLog]
        """

        self._purchase_log = purchase_log

    @property
    def rune_pickups(self):
        """
        Gets the rune_pickups of this InlineResponse200Players.
        Number of runes picked up

        :return: The rune_pickups of this InlineResponse200Players.
        :rtype: int
        """
        return self._rune_pickups

    @rune_pickups.setter
    def rune_pickups(self, rune_pickups):
        """
        Sets the rune_pickups of this InlineResponse200Players.
        Number of runes picked up

        :param rune_pickups: The rune_pickups of this InlineResponse200Players.
        :type: int
        """

        self._rune_pickups = rune_pickups

    @property
    def runes(self):
        """
        Gets the runes of this InlineResponse200Players.
        Object with information about which runes the player picked up

        :return: The runes of this InlineResponse200Players.
        :rtype: dict(str, int)
        """
        return self._runes

    @runes.setter
    def runes(self, runes):
        """
        Sets the runes of this InlineResponse200Players.
        Object with information about which runes the player picked up

        :param runes: The runes of this InlineResponse200Players.
        :type: dict(str, int)
        """

        self._runes = runes

    @property
    def runes_log(self):
        """
        Gets the runes_log of this InlineResponse200Players.
        Array with information on when runes were picked up

        :return: The runes_log of this InlineResponse200Players.
        :rtype: list[InlineResponse200RunesLog]
        """
        return self._runes_log

    @runes_log.setter
    def runes_log(self, runes_log):
        """
        Sets the runes_log of this InlineResponse200Players.
        Array with information on when runes were picked up

        :param runes_log: The runes_log of this InlineResponse200Players.
        :type: list[InlineResponse200RunesLog]
        """

        self._runes_log = runes_log

    @property
    def sen(self):
        """
        Gets the sen of this InlineResponse200Players.
        Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192.

        :return: The sen of this InlineResponse200Players.
        :rtype: object
        """
        return self._sen

    @sen.setter
    def sen(self, sen):
        """
        Sets the sen of this InlineResponse200Players.
        Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192.

        :param sen: The sen of this InlineResponse200Players.
        :type: object
        """

        self._sen = sen

    @property
    def sen_left_log(self):
        """
        Gets the sen_left_log of this InlineResponse200Players.
        Array containing information on when and where the player placed sentries

        :return: The sen_left_log of this InlineResponse200Players.
        :rtype: list[object]
        """
        return self._sen_left_log

    @sen_left_log.setter
    def sen_left_log(self, sen_left_log):
        """
        Sets the sen_left_log of this InlineResponse200Players.
        Array containing information on when and where the player placed sentries

        :param sen_left_log: The sen_left_log of this InlineResponse200Players.
        :type: list[object]
        """

        self._sen_left_log = sen_left_log

    @property
    def sen_log(self):
        """
        Gets the sen_log of this InlineResponse200Players.
        Array with information on when and where sentries were placed by the player

        :return: The sen_log of this InlineResponse200Players.
        :rtype: list[object]
        """
        return self._sen_log

    @sen_log.setter
    def sen_log(self, sen_log):
        """
        Sets the sen_log of this InlineResponse200Players.
        Array with information on when and where sentries were placed by the player

        :param sen_log: The sen_log of this InlineResponse200Players.
        :type: list[object]
        """

        self._sen_log = sen_log

    @property
    def sen_placed(self):
        """
        Gets the sen_placed of this InlineResponse200Players.
        How many sentries were placed by the player

        :return: The sen_placed of this InlineResponse200Players.
        :rtype: int
        """
        return self._sen_placed

    @sen_placed.setter
    def sen_placed(self, sen_placed):
        """
        Sets the sen_placed of this InlineResponse200Players.
        How many sentries were placed by the player

        :param sen_placed: The sen_placed of this InlineResponse200Players.
        :type: int
        """

        self._sen_placed = sen_placed

    @property
    def stuns(self):
        """
        Gets the stuns of this InlineResponse200Players.
        Total stun duration of all stuns by the player

        :return: The stuns of this InlineResponse200Players.
        :rtype: float
        """
        return self._stuns

    @stuns.setter
    def stuns(self, stuns):
        """
        Sets the stuns of this InlineResponse200Players.
        Total stun duration of all stuns by the player

        :param stuns: The stuns of this InlineResponse200Players.
        :type: float
        """

        self._stuns = stuns

    @property
    def times(self):
        """
        Gets the times of this InlineResponse200Players.
        Time in seconds corresponding to the time of entries of other arrays in the match.

        :return: The times of this InlineResponse200Players.
        :rtype: list[int]
        """
        return self._times

    @times.setter
    def times(self, times):
        """
        Sets the times of this InlineResponse200Players.
        Time in seconds corresponding to the time of entries of other arrays in the match.

        :param times: The times of this InlineResponse200Players.
        :type: list[int]
        """

        self._times = times

    @property
    def tower_damage(self):
        """
        Gets the tower_damage of this InlineResponse200Players.
        Total tower damage done by the player

        :return: The tower_damage of this InlineResponse200Players.
        :rtype: int
        """
        return self._tower_damage

    @tower_damage.setter
    def tower_damage(self, tower_damage):
        """
        Sets the tower_damage of this InlineResponse200Players.
        Total tower damage done by the player

        :param tower_damage: The tower_damage of this InlineResponse200Players.
        :type: int
        """

        self._tower_damage = tower_damage

    @property
    def xp_per_min(self):
        """
        Gets the xp_per_min of this InlineResponse200Players.
        Experience Per Minute obtained by the player

        :return: The xp_per_min of this InlineResponse200Players.
        :rtype: int
        """
        return self._xp_per_min

    @xp_per_min.setter
    def xp_per_min(self, xp_per_min):
        """
        Sets the xp_per_min of this InlineResponse200Players.
        Experience Per Minute obtained by the player

        :param xp_per_min: The xp_per_min of this InlineResponse200Players.
        :type: int
        """

        self._xp_per_min = xp_per_min

    @property
    def xp_reasons(self):
        """
        Gets the xp_reasons of this InlineResponse200Players.
        Object containing information on the sources of this player's experience

        :return: The xp_reasons of this InlineResponse200Players.
        :rtype: object
        """
        return self._xp_reasons

    @xp_reasons.setter
    def xp_reasons(self, xp_reasons):
        """
        Sets the xp_reasons of this InlineResponse200Players.
        Object containing information on the sources of this player's experience

        :param xp_reasons: The xp_reasons of this InlineResponse200Players.
        :type: object
        """

        self._xp_reasons = xp_reasons

    @property
    def xp_t(self):
        """
        Gets the xp_t of this InlineResponse200Players.
        Experience at each minute of the game

        :return: The xp_t of this InlineResponse200Players.
        :rtype: list[int]
        """
        return self._xp_t

    @xp_t.setter
    def xp_t(self, xp_t):
        """
        Sets the xp_t of this InlineResponse200Players.
        Experience at each minute of the game

        :param xp_t: The xp_t of this InlineResponse200Players.
        :type: list[int]
        """

        self._xp_t = xp_t

    @property
    def personaname(self):
        """
        Gets the personaname of this InlineResponse200Players.
        personaname

        :return: The personaname of this InlineResponse200Players.
        :rtype: str
        """
        return self._personaname

    @personaname.setter
    def personaname(self, personaname):
        """
        Sets the personaname of this InlineResponse200Players.
        personaname

        :param personaname: The personaname of this InlineResponse200Players.
        :type: str
        """

        self._personaname = personaname

    @property
    def name(self):
        """
        Gets the name of this InlineResponse200Players.
        name

        :return: The name of this InlineResponse200Players.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse200Players.
        name

        :param name: The name of this InlineResponse200Players.
        :type: str
        """

        self._name = name

    @property
    def radiant_win(self):
        """
        Gets the radiant_win of this InlineResponse200Players.
        Boolean indicating whether Radiant won the match

        :return: The radiant_win of this InlineResponse200Players.
        :rtype: bool
        """
        return self._radiant_win

    @radiant_win.setter
    def radiant_win(self, radiant_win):
        """
        Sets the radiant_win of this InlineResponse200Players.
        Boolean indicating whether Radiant won the match

        :param radiant_win: The radiant_win of this InlineResponse200Players.
        :type: bool
        """

        self._radiant_win = radiant_win

    @property
    def start_time(self):
        """
        Gets the start_time of this InlineResponse200Players.
        Start time of the match in seconds since 1970

        :return: The start_time of this InlineResponse200Players.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this InlineResponse200Players.
        Start time of the match in seconds since 1970

        :param start_time: The start_time of this InlineResponse200Players.
        :type: int
        """

        self._start_time = start_time

    @property
    def duration(self):
        """
        Gets the duration of this InlineResponse200Players.
        Duration of the game in seconds

        :return: The duration of this InlineResponse200Players.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this InlineResponse200Players.
        Duration of the game in seconds

        :param duration: The duration of this InlineResponse200Players.
        :type: int
        """

        self._duration = duration

    @property
    def cluster(self):
        """
        Gets the cluster of this InlineResponse200Players.
        cluster

        :return: The cluster of this InlineResponse200Players.
        :rtype: int
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this InlineResponse200Players.
        cluster

        :param cluster: The cluster of this InlineResponse200Players.
        :type: int
        """

        self._cluster = cluster

    @property
    def lobby_type(self):
        """
        Gets the lobby_type of this InlineResponse200Players.
        Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json

        :return: The lobby_type of this InlineResponse200Players.
        :rtype: int
        """
        return self._lobby_type

    @lobby_type.setter
    def lobby_type(self, lobby_type):
        """
        Sets the lobby_type of this InlineResponse200Players.
        Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json

        :param lobby_type: The lobby_type of this InlineResponse200Players.
        :type: int
        """

        self._lobby_type = lobby_type

    @property
    def game_mode(self):
        """
        Gets the game_mode of this InlineResponse200Players.
        Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json

        :return: The game_mode of this InlineResponse200Players.
        :rtype: int
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """
        Sets the game_mode of this InlineResponse200Players.
        Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json

        :param game_mode: The game_mode of this InlineResponse200Players.
        :type: int
        """

        self._game_mode = game_mode

    @property
    def patch(self):
        """
        Gets the patch of this InlineResponse200Players.
        Integer representing the patch the game was played on

        :return: The patch of this InlineResponse200Players.
        :rtype: int
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """
        Sets the patch of this InlineResponse200Players.
        Integer representing the patch the game was played on

        :param patch: The patch of this InlineResponse200Players.
        :type: int
        """

        self._patch = patch

    @property
    def region(self):
        """
        Gets the region of this InlineResponse200Players.
        Integer corresponding to the region the game was played on

        :return: The region of this InlineResponse200Players.
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this InlineResponse200Players.
        Integer corresponding to the region the game was played on

        :param region: The region of this InlineResponse200Players.
        :type: int
        """

        self._region = region

    @property
    def is_radiant(self):
        """
        Gets the is_radiant of this InlineResponse200Players.
        Boolean for whether or not the player is on Radiant

        :return: The is_radiant of this InlineResponse200Players.
        :rtype: bool
        """
        return self._is_radiant

    @is_radiant.setter
    def is_radiant(self, is_radiant):
        """
        Sets the is_radiant of this InlineResponse200Players.
        Boolean for whether or not the player is on Radiant

        :param is_radiant: The is_radiant of this InlineResponse200Players.
        :type: bool
        """

        self._is_radiant = is_radiant

    @property
    def win(self):
        """
        Gets the win of this InlineResponse200Players.
        Binary integer representing whether or not the player won

        :return: The win of this InlineResponse200Players.
        :rtype: int
        """
        return self._win

    @win.setter
    def win(self, win):
        """
        Sets the win of this InlineResponse200Players.
        Binary integer representing whether or not the player won

        :param win: The win of this InlineResponse200Players.
        :type: int
        """

        self._win = win

    @property
    def lose(self):
        """
        Gets the lose of this InlineResponse200Players.
        Binary integer representing whether or not the player lost

        :return: The lose of this InlineResponse200Players.
        :rtype: int
        """
        return self._lose

    @lose.setter
    def lose(self, lose):
        """
        Sets the lose of this InlineResponse200Players.
        Binary integer representing whether or not the player lost

        :param lose: The lose of this InlineResponse200Players.
        :type: int
        """

        self._lose = lose

    @property
    def total_gold(self):
        """
        Gets the total_gold of this InlineResponse200Players.
        Total gold at the end of the game

        :return: The total_gold of this InlineResponse200Players.
        :rtype: int
        """
        return self._total_gold

    @total_gold.setter
    def total_gold(self, total_gold):
        """
        Sets the total_gold of this InlineResponse200Players.
        Total gold at the end of the game

        :param total_gold: The total_gold of this InlineResponse200Players.
        :type: int
        """

        self._total_gold = total_gold

    @property
    def total_xp(self):
        """
        Gets the total_xp of this InlineResponse200Players.
        Total experience at the end of the game

        :return: The total_xp of this InlineResponse200Players.
        :rtype: int
        """
        return self._total_xp

    @total_xp.setter
    def total_xp(self, total_xp):
        """
        Sets the total_xp of this InlineResponse200Players.
        Total experience at the end of the game

        :param total_xp: The total_xp of this InlineResponse200Players.
        :type: int
        """

        self._total_xp = total_xp

    @property
    def kills_per_min(self):
        """
        Gets the kills_per_min of this InlineResponse200Players.
        Number of kills per minute

        :return: The kills_per_min of this InlineResponse200Players.
        :rtype: float
        """
        return self._kills_per_min

    @kills_per_min.setter
    def kills_per_min(self, kills_per_min):
        """
        Sets the kills_per_min of this InlineResponse200Players.
        Number of kills per minute

        :param kills_per_min: The kills_per_min of this InlineResponse200Players.
        :type: float
        """

        self._kills_per_min = kills_per_min

    @property
    def kda(self):
        """
        Gets the kda of this InlineResponse200Players.
        kda

        :return: The kda of this InlineResponse200Players.
        :rtype: float
        """
        return self._kda

    @kda.setter
    def kda(self, kda):
        """
        Sets the kda of this InlineResponse200Players.
        kda

        :param kda: The kda of this InlineResponse200Players.
        :type: float
        """

        self._kda = kda

    @property
    def abandons(self):
        """
        Gets the abandons of this InlineResponse200Players.
        abandons

        :return: The abandons of this InlineResponse200Players.
        :rtype: int
        """
        return self._abandons

    @abandons.setter
    def abandons(self, abandons):
        """
        Sets the abandons of this InlineResponse200Players.
        abandons

        :param abandons: The abandons of this InlineResponse200Players.
        :type: int
        """

        self._abandons = abandons

    @property
    def neutral_kills(self):
        """
        Gets the neutral_kills of this InlineResponse200Players.
        Total number of neutral creeps killed

        :return: The neutral_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._neutral_kills

    @neutral_kills.setter
    def neutral_kills(self, neutral_kills):
        """
        Sets the neutral_kills of this InlineResponse200Players.
        Total number of neutral creeps killed

        :param neutral_kills: The neutral_kills of this InlineResponse200Players.
        :type: int
        """

        self._neutral_kills = neutral_kills

    @property
    def tower_kills(self):
        """
        Gets the tower_kills of this InlineResponse200Players.
        Total number of tower kills the player had

        :return: The tower_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._tower_kills

    @tower_kills.setter
    def tower_kills(self, tower_kills):
        """
        Sets the tower_kills of this InlineResponse200Players.
        Total number of tower kills the player had

        :param tower_kills: The tower_kills of this InlineResponse200Players.
        :type: int
        """

        self._tower_kills = tower_kills

    @property
    def courier_kills(self):
        """
        Gets the courier_kills of this InlineResponse200Players.
        Total number of courier kills the player had

        :return: The courier_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._courier_kills

    @courier_kills.setter
    def courier_kills(self, courier_kills):
        """
        Sets the courier_kills of this InlineResponse200Players.
        Total number of courier kills the player had

        :param courier_kills: The courier_kills of this InlineResponse200Players.
        :type: int
        """

        self._courier_kills = courier_kills

    @property
    def lane_kills(self):
        """
        Gets the lane_kills of this InlineResponse200Players.
        Total number of lane creeps killed by the player

        :return: The lane_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._lane_kills

    @lane_kills.setter
    def lane_kills(self, lane_kills):
        """
        Sets the lane_kills of this InlineResponse200Players.
        Total number of lane creeps killed by the player

        :param lane_kills: The lane_kills of this InlineResponse200Players.
        :type: int
        """

        self._lane_kills = lane_kills

    @property
    def hero_kills(self):
        """
        Gets the hero_kills of this InlineResponse200Players.
        Total number of heroes killed by the player

        :return: The hero_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._hero_kills

    @hero_kills.setter
    def hero_kills(self, hero_kills):
        """
        Sets the hero_kills of this InlineResponse200Players.
        Total number of heroes killed by the player

        :param hero_kills: The hero_kills of this InlineResponse200Players.
        :type: int
        """

        self._hero_kills = hero_kills

    @property
    def observer_kills(self):
        """
        Gets the observer_kills of this InlineResponse200Players.
        Total number of observer wards killed by the player

        :return: The observer_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._observer_kills

    @observer_kills.setter
    def observer_kills(self, observer_kills):
        """
        Sets the observer_kills of this InlineResponse200Players.
        Total number of observer wards killed by the player

        :param observer_kills: The observer_kills of this InlineResponse200Players.
        :type: int
        """

        self._observer_kills = observer_kills

    @property
    def sentry_kills(self):
        """
        Gets the sentry_kills of this InlineResponse200Players.
        Total number of sentry wards killed by the player

        :return: The sentry_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._sentry_kills

    @sentry_kills.setter
    def sentry_kills(self, sentry_kills):
        """
        Sets the sentry_kills of this InlineResponse200Players.
        Total number of sentry wards killed by the player

        :param sentry_kills: The sentry_kills of this InlineResponse200Players.
        :type: int
        """

        self._sentry_kills = sentry_kills

    @property
    def roshan_kills(self):
        """
        Gets the roshan_kills of this InlineResponse200Players.
        Total number of roshan kills (last hit on roshan) the player had

        :return: The roshan_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._roshan_kills

    @roshan_kills.setter
    def roshan_kills(self, roshan_kills):
        """
        Sets the roshan_kills of this InlineResponse200Players.
        Total number of roshan kills (last hit on roshan) the player had

        :param roshan_kills: The roshan_kills of this InlineResponse200Players.
        :type: int
        """

        self._roshan_kills = roshan_kills

    @property
    def necronomicon_kills(self):
        """
        Gets the necronomicon_kills of this InlineResponse200Players.
        Total number of Necronomicon creeps killed by the player

        :return: The necronomicon_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._necronomicon_kills

    @necronomicon_kills.setter
    def necronomicon_kills(self, necronomicon_kills):
        """
        Sets the necronomicon_kills of this InlineResponse200Players.
        Total number of Necronomicon creeps killed by the player

        :param necronomicon_kills: The necronomicon_kills of this InlineResponse200Players.
        :type: int
        """

        self._necronomicon_kills = necronomicon_kills

    @property
    def ancient_kills(self):
        """
        Gets the ancient_kills of this InlineResponse200Players.
        Total number of Ancient creeps killed by the player

        :return: The ancient_kills of this InlineResponse200Players.
        :rtype: int
        """
        return self._ancient_kills

    @ancient_kills.setter
    def ancient_kills(self, ancient_kills):
        """
        Sets the ancient_kills of this InlineResponse200Players.
        Total number of Ancient creeps killed by the player

        :param ancient_kills: The ancient_kills of this InlineResponse200Players.
        :type: int
        """

        self._ancient_kills = ancient_kills

    @property
    def buyback_count(self):
        """
        Gets the buyback_count of this InlineResponse200Players.
        Total number of buyback the player used

        :return: The buyback_count of this InlineResponse200Players.
        :rtype: int
        """
        return self._buyback_count

    @buyback_count.setter
    def buyback_count(self, buyback_count):
        """
        Sets the buyback_count of this InlineResponse200Players.
        Total number of buyback the player used

        :param buyback_count: The buyback_count of this InlineResponse200Players.
        :type: int
        """

        self._buyback_count = buyback_count

    @property
    def observer_uses(self):
        """
        Gets the observer_uses of this InlineResponse200Players.
        Number of observer wards used

        :return: The observer_uses of this InlineResponse200Players.
        :rtype: int
        """
        return self._observer_uses

    @observer_uses.setter
    def observer_uses(self, observer_uses):
        """
        Sets the observer_uses of this InlineResponse200Players.
        Number of observer wards used

        :param observer_uses: The observer_uses of this InlineResponse200Players.
        :type: int
        """

        self._observer_uses = observer_uses

    @property
    def sentry_uses(self):
        """
        Gets the sentry_uses of this InlineResponse200Players.
        Number of sentry wards used

        :return: The sentry_uses of this InlineResponse200Players.
        :rtype: int
        """
        return self._sentry_uses

    @sentry_uses.setter
    def sentry_uses(self, sentry_uses):
        """
        Sets the sentry_uses of this InlineResponse200Players.
        Number of sentry wards used

        :param sentry_uses: The sentry_uses of this InlineResponse200Players.
        :type: int
        """

        self._sentry_uses = sentry_uses

    @property
    def lane_efficiency(self):
        """
        Gets the lane_efficiency of this InlineResponse200Players.
        lane_efficiency

        :return: The lane_efficiency of this InlineResponse200Players.
        :rtype: float
        """
        return self._lane_efficiency

    @lane_efficiency.setter
    def lane_efficiency(self, lane_efficiency):
        """
        Sets the lane_efficiency of this InlineResponse200Players.
        lane_efficiency

        :param lane_efficiency: The lane_efficiency of this InlineResponse200Players.
        :type: float
        """

        self._lane_efficiency = lane_efficiency

    @property
    def lane_efficiency_pct(self):
        """
        Gets the lane_efficiency_pct of this InlineResponse200Players.
        lane_efficiency_pct

        :return: The lane_efficiency_pct of this InlineResponse200Players.
        :rtype: float
        """
        return self._lane_efficiency_pct

    @lane_efficiency_pct.setter
    def lane_efficiency_pct(self, lane_efficiency_pct):
        """
        Sets the lane_efficiency_pct of this InlineResponse200Players.
        lane_efficiency_pct

        :param lane_efficiency_pct: The lane_efficiency_pct of this InlineResponse200Players.
        :type: float
        """

        self._lane_efficiency_pct = lane_efficiency_pct

    @property
    def lane(self):
        """
        Gets the lane of this InlineResponse200Players.
        Integer referring to which lane the hero laned in

        :return: The lane of this InlineResponse200Players.
        :rtype: int
        """
        return self._lane

    @lane.setter
    def lane(self, lane):
        """
        Sets the lane of this InlineResponse200Players.
        Integer referring to which lane the hero laned in

        :param lane: The lane of this InlineResponse200Players.
        :type: int
        """

        self._lane = lane

    @property
    def lane_role(self):
        """
        Gets the lane_role of this InlineResponse200Players.
        lane_role

        :return: The lane_role of this InlineResponse200Players.
        :rtype: int
        """
        return self._lane_role

    @lane_role.setter
    def lane_role(self, lane_role):
        """
        Sets the lane_role of this InlineResponse200Players.
        lane_role

        :param lane_role: The lane_role of this InlineResponse200Players.
        :type: int
        """

        self._lane_role = lane_role

    @property
    def is_roaming(self):
        """
        Gets the is_roaming of this InlineResponse200Players.
        Boolean referring to whether or not the player roamed

        :return: The is_roaming of this InlineResponse200Players.
        :rtype: bool
        """
        return self._is_roaming

    @is_roaming.setter
    def is_roaming(self, is_roaming):
        """
        Sets the is_roaming of this InlineResponse200Players.
        Boolean referring to whether or not the player roamed

        :param is_roaming: The is_roaming of this InlineResponse200Players.
        :type: bool
        """

        self._is_roaming = is_roaming

    @property
    def purchase_time(self):
        """
        Gets the purchase_time of this InlineResponse200Players.
        Object with information on when the player last purchased an item

        :return: The purchase_time of this InlineResponse200Players.
        :rtype: object
        """
        return self._purchase_time

    @purchase_time.setter
    def purchase_time(self, purchase_time):
        """
        Sets the purchase_time of this InlineResponse200Players.
        Object with information on when the player last purchased an item

        :param purchase_time: The purchase_time of this InlineResponse200Players.
        :type: object
        """

        self._purchase_time = purchase_time

    @property
    def first_purchase_time(self):
        """
        Gets the first_purchase_time of this InlineResponse200Players.
        Object with information on when the player first puchased an item

        :return: The first_purchase_time of this InlineResponse200Players.
        :rtype: object
        """
        return self._first_purchase_time

    @first_purchase_time.setter
    def first_purchase_time(self, first_purchase_time):
        """
        Sets the first_purchase_time of this InlineResponse200Players.
        Object with information on when the player first puchased an item

        :param first_purchase_time: The first_purchase_time of this InlineResponse200Players.
        :type: object
        """

        self._first_purchase_time = first_purchase_time

    @property
    def item_win(self):
        """
        Gets the item_win of this InlineResponse200Players.
        Object with information on whether or not the item won

        :return: The item_win of this InlineResponse200Players.
        :rtype: object
        """
        return self._item_win

    @item_win.setter
    def item_win(self, item_win):
        """
        Sets the item_win of this InlineResponse200Players.
        Object with information on whether or not the item won

        :param item_win: The item_win of this InlineResponse200Players.
        :type: object
        """

        self._item_win = item_win

    @property
    def item_usage(self):
        """
        Gets the item_usage of this InlineResponse200Players.
        Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1)

        :return: The item_usage of this InlineResponse200Players.
        :rtype: object
        """
        return self._item_usage

    @item_usage.setter
    def item_usage(self, item_usage):
        """
        Sets the item_usage of this InlineResponse200Players.
        Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1)

        :param item_usage: The item_usage of this InlineResponse200Players.
        :type: object
        """

        self._item_usage = item_usage

    @property
    def purchase_tpscroll(self):
        """
        Gets the purchase_tpscroll of this InlineResponse200Players.
        Total number of TP scrolls purchased by the player

        :return: The purchase_tpscroll of this InlineResponse200Players.
        :rtype: object
        """
        return self._purchase_tpscroll

    @purchase_tpscroll.setter
    def purchase_tpscroll(self, purchase_tpscroll):
        """
        Sets the purchase_tpscroll of this InlineResponse200Players.
        Total number of TP scrolls purchased by the player

        :param purchase_tpscroll: The purchase_tpscroll of this InlineResponse200Players.
        :type: object
        """

        self._purchase_tpscroll = purchase_tpscroll

    @property
    def actions_per_min(self):
        """
        Gets the actions_per_min of this InlineResponse200Players.
        Actions per minute

        :return: The actions_per_min of this InlineResponse200Players.
        :rtype: int
        """
        return self._actions_per_min

    @actions_per_min.setter
    def actions_per_min(self, actions_per_min):
        """
        Sets the actions_per_min of this InlineResponse200Players.
        Actions per minute

        :param actions_per_min: The actions_per_min of this InlineResponse200Players.
        :type: int
        """

        self._actions_per_min = actions_per_min

    @property
    def life_state_dead(self):
        """
        Gets the life_state_dead of this InlineResponse200Players.
        life_state_dead

        :return: The life_state_dead of this InlineResponse200Players.
        :rtype: int
        """
        return self._life_state_dead

    @life_state_dead.setter
    def life_state_dead(self, life_state_dead):
        """
        Sets the life_state_dead of this InlineResponse200Players.
        life_state_dead

        :param life_state_dead: The life_state_dead of this InlineResponse200Players.
        :type: int
        """

        self._life_state_dead = life_state_dead

    @property
    def rank_tier(self):
        """
        Gets the rank_tier of this InlineResponse200Players.
        The rank tier of the player. Tens place indicates rank, ones place indicates stars.

        :return: The rank_tier of this InlineResponse200Players.
        :rtype: int
        """
        return self._rank_tier

    @rank_tier.setter
    def rank_tier(self, rank_tier):
        """
        Sets the rank_tier of this InlineResponse200Players.
        The rank tier of the player. Tens place indicates rank, ones place indicates stars.

        :param rank_tier: The rank_tier of this InlineResponse200Players.
        :type: int
        """

        self._rank_tier = rank_tier

    @property
    def cosmetics(self):
        """
        Gets the cosmetics of this InlineResponse200Players.
        cosmetics

        :return: The cosmetics of this InlineResponse200Players.
        :rtype: list[int]
        """
        return self._cosmetics

    @cosmetics.setter
    def cosmetics(self, cosmetics):
        """
        Sets the cosmetics of this InlineResponse200Players.
        cosmetics

        :param cosmetics: The cosmetics of this InlineResponse200Players.
        :type: list[int]
        """

        self._cosmetics = cosmetics

    @property
    def benchmarks(self):
        """
        Gets the benchmarks of this InlineResponse200Players.
        Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc

        :return: The benchmarks of this InlineResponse200Players.
        :rtype: object
        """
        return self._benchmarks

    @benchmarks.setter
    def benchmarks(self, benchmarks):
        """
        Sets the benchmarks of this InlineResponse200Players.
        Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc

        :param benchmarks: The benchmarks of this InlineResponse200Players.
        :type: object
        """

        self._benchmarks = benchmarks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse200Players):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
