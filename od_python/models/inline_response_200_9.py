# coding: utf-8

"""
    OpenDota API

    # Introduction This API provides Dota 2 related data. Please keep request rate to approximately 3/s. 

    OpenAPI spec version: 16.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2009(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'leaver_status': 'object',
        'game_mode': 'object',
        'lobby_type': 'object',
        'lane_role': 'object',
        'region': 'object',
        'patch': 'object'
    }

    attribute_map = {
        'leaver_status': 'leaver_status',
        'game_mode': 'game_mode',
        'lobby_type': 'lobby_type',
        'lane_role': 'lane_role',
        'region': 'region',
        'patch': 'patch'
    }

    def __init__(self, leaver_status=None, game_mode=None, lobby_type=None, lane_role=None, region=None, patch=None):
        """
        InlineResponse2009 - a model defined in Swagger
        """

        self._leaver_status = None
        self._game_mode = None
        self._lobby_type = None
        self._lane_role = None
        self._region = None
        self._patch = None

        if leaver_status is not None:
          self.leaver_status = leaver_status
        if game_mode is not None:
          self.game_mode = game_mode
        if lobby_type is not None:
          self.lobby_type = lobby_type
        if lane_role is not None:
          self.lane_role = lane_role
        if region is not None:
          self.region = region
        if patch is not None:
          self.patch = patch

    @property
    def leaver_status(self):
        """
        Gets the leaver_status of this InlineResponse2009.
        leaver_status

        :return: The leaver_status of this InlineResponse2009.
        :rtype: object
        """
        return self._leaver_status

    @leaver_status.setter
    def leaver_status(self, leaver_status):
        """
        Sets the leaver_status of this InlineResponse2009.
        leaver_status

        :param leaver_status: The leaver_status of this InlineResponse2009.
        :type: object
        """

        self._leaver_status = leaver_status

    @property
    def game_mode(self):
        """
        Gets the game_mode of this InlineResponse2009.
        game_mode

        :return: The game_mode of this InlineResponse2009.
        :rtype: object
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """
        Sets the game_mode of this InlineResponse2009.
        game_mode

        :param game_mode: The game_mode of this InlineResponse2009.
        :type: object
        """

        self._game_mode = game_mode

    @property
    def lobby_type(self):
        """
        Gets the lobby_type of this InlineResponse2009.
        lobby_type

        :return: The lobby_type of this InlineResponse2009.
        :rtype: object
        """
        return self._lobby_type

    @lobby_type.setter
    def lobby_type(self, lobby_type):
        """
        Sets the lobby_type of this InlineResponse2009.
        lobby_type

        :param lobby_type: The lobby_type of this InlineResponse2009.
        :type: object
        """

        self._lobby_type = lobby_type

    @property
    def lane_role(self):
        """
        Gets the lane_role of this InlineResponse2009.
        lane_role

        :return: The lane_role of this InlineResponse2009.
        :rtype: object
        """
        return self._lane_role

    @lane_role.setter
    def lane_role(self, lane_role):
        """
        Sets the lane_role of this InlineResponse2009.
        lane_role

        :param lane_role: The lane_role of this InlineResponse2009.
        :type: object
        """

        self._lane_role = lane_role

    @property
    def region(self):
        """
        Gets the region of this InlineResponse2009.
        region

        :return: The region of this InlineResponse2009.
        :rtype: object
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this InlineResponse2009.
        region

        :param region: The region of this InlineResponse2009.
        :type: object
        """

        self._region = region

    @property
    def patch(self):
        """
        Gets the patch of this InlineResponse2009.
        patch

        :return: The patch of this InlineResponse2009.
        :rtype: object
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """
        Sets the patch of this InlineResponse2009.
        patch

        :param patch: The patch of this InlineResponse2009.
        :type: object
        """

        self._patch = patch

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2009):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
