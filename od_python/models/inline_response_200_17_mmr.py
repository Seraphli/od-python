# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays. Please keep request rate to approximately 1/s.  **Begining 4/22/2018, the OpenDota API will be limited to 50,000 free calls per month.** We'll be offering a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 17.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20017Mmr(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commmand': 'str',
        'row_count': 'int',
        'rows': 'list[InlineResponse20017RanksRows]',
        'fields': 'list[InlineResponse20017RanksFields]',
        'row_as_array': 'bool',
        'sum': 'InlineResponse20017RanksSum'
    }

    attribute_map = {
        'commmand': 'commmand',
        'row_count': 'rowCount',
        'rows': 'rows',
        'fields': 'fields',
        'row_as_array': 'rowAsArray',
        'sum': 'sum'
    }

    def __init__(self, commmand=None, row_count=None, rows=None, fields=None, row_as_array=None, sum=None):
        """
        InlineResponse20017Mmr - a model defined in Swagger
        """

        self._commmand = None
        self._row_count = None
        self._rows = None
        self._fields = None
        self._row_as_array = None
        self._sum = None

        if commmand is not None:
          self.commmand = commmand
        if row_count is not None:
          self.row_count = row_count
        if rows is not None:
          self.rows = rows
        if fields is not None:
          self.fields = fields
        if row_as_array is not None:
          self.row_as_array = row_as_array
        if sum is not None:
          self.sum = sum

    @property
    def commmand(self):
        """
        Gets the commmand of this InlineResponse20017Mmr.
        command

        :return: The commmand of this InlineResponse20017Mmr.
        :rtype: str
        """
        return self._commmand

    @commmand.setter
    def commmand(self, commmand):
        """
        Sets the commmand of this InlineResponse20017Mmr.
        command

        :param commmand: The commmand of this InlineResponse20017Mmr.
        :type: str
        """

        self._commmand = commmand

    @property
    def row_count(self):
        """
        Gets the row_count of this InlineResponse20017Mmr.
        rowCount

        :return: The row_count of this InlineResponse20017Mmr.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """
        Sets the row_count of this InlineResponse20017Mmr.
        rowCount

        :param row_count: The row_count of this InlineResponse20017Mmr.
        :type: int
        """

        self._row_count = row_count

    @property
    def rows(self):
        """
        Gets the rows of this InlineResponse20017Mmr.
        rows

        :return: The rows of this InlineResponse20017Mmr.
        :rtype: list[InlineResponse20017RanksRows]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """
        Sets the rows of this InlineResponse20017Mmr.
        rows

        :param rows: The rows of this InlineResponse20017Mmr.
        :type: list[InlineResponse20017RanksRows]
        """

        self._rows = rows

    @property
    def fields(self):
        """
        Gets the fields of this InlineResponse20017Mmr.
        fields

        :return: The fields of this InlineResponse20017Mmr.
        :rtype: list[InlineResponse20017RanksFields]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this InlineResponse20017Mmr.
        fields

        :param fields: The fields of this InlineResponse20017Mmr.
        :type: list[InlineResponse20017RanksFields]
        """

        self._fields = fields

    @property
    def row_as_array(self):
        """
        Gets the row_as_array of this InlineResponse20017Mmr.
        rowAsArray

        :return: The row_as_array of this InlineResponse20017Mmr.
        :rtype: bool
        """
        return self._row_as_array

    @row_as_array.setter
    def row_as_array(self, row_as_array):
        """
        Sets the row_as_array of this InlineResponse20017Mmr.
        rowAsArray

        :param row_as_array: The row_as_array of this InlineResponse20017Mmr.
        :type: bool
        """

        self._row_as_array = row_as_array

    @property
    def sum(self):
        """
        Gets the sum of this InlineResponse20017Mmr.

        :return: The sum of this InlineResponse20017Mmr.
        :rtype: InlineResponse20017RanksSum
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """
        Sets the sum of this InlineResponse20017Mmr.

        :param sum: The sum of this InlineResponse20017Mmr.
        :type: InlineResponse20017RanksSum
        """

        self._sum = sum

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20017Mmr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
