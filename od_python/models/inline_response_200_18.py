# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays. Please keep request rate to approximately 1/s.  **Begining 4/22/2018, the OpenDota API will be limited to 50,000 free calls per month.** We'll be offering a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 17.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20018(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'avatarfull': 'str',
        'personaname': 'str',
        'similarity': 'float'
    }

    attribute_map = {
        'account_id': 'account_id',
        'avatarfull': 'avatarfull',
        'personaname': 'personaname',
        'similarity': 'similarity'
    }

    def __init__(self, account_id=None, avatarfull=None, personaname=None, similarity=None):
        """
        InlineResponse20018 - a model defined in Swagger
        """

        self._account_id = None
        self._avatarfull = None
        self._personaname = None
        self._similarity = None

        if account_id is not None:
          self.account_id = account_id
        if avatarfull is not None:
          self.avatarfull = avatarfull
        if personaname is not None:
          self.personaname = personaname
        if similarity is not None:
          self.similarity = similarity

    @property
    def account_id(self):
        """
        Gets the account_id of this InlineResponse20018.
        account_id

        :return: The account_id of this InlineResponse20018.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this InlineResponse20018.
        account_id

        :param account_id: The account_id of this InlineResponse20018.
        :type: int
        """

        self._account_id = account_id

    @property
    def avatarfull(self):
        """
        Gets the avatarfull of this InlineResponse20018.
        avatarfull

        :return: The avatarfull of this InlineResponse20018.
        :rtype: str
        """
        return self._avatarfull

    @avatarfull.setter
    def avatarfull(self, avatarfull):
        """
        Sets the avatarfull of this InlineResponse20018.
        avatarfull

        :param avatarfull: The avatarfull of this InlineResponse20018.
        :type: str
        """

        self._avatarfull = avatarfull

    @property
    def personaname(self):
        """
        Gets the personaname of this InlineResponse20018.
        personaname

        :return: The personaname of this InlineResponse20018.
        :rtype: str
        """
        return self._personaname

    @personaname.setter
    def personaname(self, personaname):
        """
        Sets the personaname of this InlineResponse20018.
        personaname

        :param personaname: The personaname of this InlineResponse20018.
        :type: str
        """

        self._personaname = personaname

    @property
    def similarity(self):
        """
        Gets the similarity of this InlineResponse20018.
        similarity

        :return: The similarity of this InlineResponse20018.
        :rtype: float
        """
        return self._similarity

    @similarity.setter
    def similarity(self, similarity):
        """
        Sets the similarity of this InlineResponse20018.
        similarity

        :param similarity: The similarity of this InlineResponse20018.
        :type: float
        """

        self._similarity = similarity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20018):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
