# coding: utf-8

"""
    OpenDota API

    # Introduction This API provides Dota 2 related data. Please keep request rate to approximately 3/s. 

    OpenAPI spec version: 15.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2001(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tracked_until': 'str',
        'solo_competitive_rank': 'str',
        'competitive_rank': 'str',
        'mmr_estimate': 'InlineResponse2001MmrEstimate',
        'profile': 'InlineResponse2001Profile'
    }

    attribute_map = {
        'tracked_until': 'tracked_until',
        'solo_competitive_rank': 'solo_competitive_rank',
        'competitive_rank': 'competitive_rank',
        'mmr_estimate': 'mmr_estimate',
        'profile': 'profile'
    }

    def __init__(self, tracked_until=None, solo_competitive_rank=None, competitive_rank=None, mmr_estimate=None, profile=None):
        """
        InlineResponse2001 - a model defined in Swagger
        """

        self._tracked_until = None
        self._solo_competitive_rank = None
        self._competitive_rank = None
        self._mmr_estimate = None
        self._profile = None

        if tracked_until is not None:
          self.tracked_until = tracked_until
        if solo_competitive_rank is not None:
          self.solo_competitive_rank = solo_competitive_rank
        if competitive_rank is not None:
          self.competitive_rank = competitive_rank
        if mmr_estimate is not None:
          self.mmr_estimate = mmr_estimate
        if profile is not None:
          self.profile = profile

    @property
    def tracked_until(self):
        """
        Gets the tracked_until of this InlineResponse2001.
        tracked_until

        :return: The tracked_until of this InlineResponse2001.
        :rtype: str
        """
        return self._tracked_until

    @tracked_until.setter
    def tracked_until(self, tracked_until):
        """
        Sets the tracked_until of this InlineResponse2001.
        tracked_until

        :param tracked_until: The tracked_until of this InlineResponse2001.
        :type: str
        """

        self._tracked_until = tracked_until

    @property
    def solo_competitive_rank(self):
        """
        Gets the solo_competitive_rank of this InlineResponse2001.
        solo_competitive_rank

        :return: The solo_competitive_rank of this InlineResponse2001.
        :rtype: str
        """
        return self._solo_competitive_rank

    @solo_competitive_rank.setter
    def solo_competitive_rank(self, solo_competitive_rank):
        """
        Sets the solo_competitive_rank of this InlineResponse2001.
        solo_competitive_rank

        :param solo_competitive_rank: The solo_competitive_rank of this InlineResponse2001.
        :type: str
        """

        self._solo_competitive_rank = solo_competitive_rank

    @property
    def competitive_rank(self):
        """
        Gets the competitive_rank of this InlineResponse2001.
        competitive_rank

        :return: The competitive_rank of this InlineResponse2001.
        :rtype: str
        """
        return self._competitive_rank

    @competitive_rank.setter
    def competitive_rank(self, competitive_rank):
        """
        Sets the competitive_rank of this InlineResponse2001.
        competitive_rank

        :param competitive_rank: The competitive_rank of this InlineResponse2001.
        :type: str
        """

        self._competitive_rank = competitive_rank

    @property
    def mmr_estimate(self):
        """
        Gets the mmr_estimate of this InlineResponse2001.

        :return: The mmr_estimate of this InlineResponse2001.
        :rtype: InlineResponse2001MmrEstimate
        """
        return self._mmr_estimate

    @mmr_estimate.setter
    def mmr_estimate(self, mmr_estimate):
        """
        Sets the mmr_estimate of this InlineResponse2001.

        :param mmr_estimate: The mmr_estimate of this InlineResponse2001.
        :type: InlineResponse2001MmrEstimate
        """

        self._mmr_estimate = mmr_estimate

    @property
    def profile(self):
        """
        Gets the profile of this InlineResponse2001.

        :return: The profile of this InlineResponse2001.
        :rtype: InlineResponse2001Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this InlineResponse2001.

        :param profile: The profile of this InlineResponse2001.
        :type: InlineResponse2001Profile
        """

        self._profile = profile

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
