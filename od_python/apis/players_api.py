# coding: utf-8

"""
    OpenDota API

    # Introduction This API provides Dota 2 related data. Please keep request rate to approximately 3/s. 

    OpenAPI spec version: 17.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PlayersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def players_account_id_counts_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/counts
        Counts in categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_counts_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_counts_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_counts_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_counts_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/counts
        Counts in categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_counts_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_counts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_counts_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/counts', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2009',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}
        Player data
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}
        Player data
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_heroes_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/heroes
        Heroes played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_heroes_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse2005]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_heroes_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_heroes_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_heroes_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/heroes
        Heroes played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_heroes_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse2005]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_heroes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_heroes_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/heroes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2005]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_histograms_field_get(self, account_id, field, **kwargs):
        """
        GET /players/{account_id}/histograms
        Distribution of matches in a single stat
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_histograms_field_get(account_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param str field: Field to aggregate on (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_histograms_field_get_with_http_info(account_id, field, **kwargs)
        else:
            (data) = self.players_account_id_histograms_field_get_with_http_info(account_id, field, **kwargs)
            return data

    def players_account_id_histograms_field_get_with_http_info(self, account_id, field, **kwargs):
        """
        GET /players/{account_id}/histograms
        Distribution of matches in a single stat
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_histograms_field_get_with_http_info(account_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param str field: Field to aggregate on (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'field', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_histograms_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_histograms_field_get`")
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `players_account_id_histograms_field_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']
        if 'field' in params:
            path_params['field'] = params['field']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/histograms/{field}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[object]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_matches_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/matches
        Matches played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_matches_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :param str project: Fields to project (array)
        :return: list[InlineResponse2004]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_matches_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_matches_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_matches_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/matches
        Matches played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_matches_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :param str project: Fields to project (array)
        :return: list[InlineResponse2004]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort', 'project']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_matches_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_matches_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'project' in params:
            query_params.append(('project', params['project']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/matches', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2004]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_peers_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/peers
        Players played with
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_peers_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse2006]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_peers_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_peers_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_peers_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/peers
        Players played with
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_peers_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse2006]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_peers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_peers_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/peers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2006]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_pros_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/pros
        Pro players played with
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_pros_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse2007]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_pros_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_pros_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_pros_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/pros
        Pro players played with
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_pros_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse2007]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_pros_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_pros_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/pros', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2007]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_rankings_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/rankings
        Player hero rankings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_rankings_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_rankings_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_rankings_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_rankings_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/rankings
        Player hero rankings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_rankings_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_rankings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_rankings_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/rankings', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[object]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_ratings_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/ratings
        Player rating history
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_ratings_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[InlineResponse20012]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_ratings_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_ratings_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_ratings_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/ratings
        Player rating history
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_ratings_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[InlineResponse20012]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_ratings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_ratings_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/ratings', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse20012]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_recent_matches_get(self, **kwargs):
        """
        GET /players/{account_id}/recentMatches
        Recent matches played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_recent_matches_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_recent_matches_get_with_http_info(**kwargs)
        else:
            (data) = self.players_account_id_recent_matches_get_with_http_info(**kwargs)
            return data

    def players_account_id_recent_matches_get_with_http_info(self, **kwargs):
        """
        GET /players/{account_id}/recentMatches
        Recent matches played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_recent_matches_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_recent_matches_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/recentMatches', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2003]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_refresh_post(self, account_id, **kwargs):
        """
        POST /players/{account_id}/refresh
        Refresh player match history
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_refresh_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_refresh_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_refresh_post_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_refresh_post_with_http_info(self, account_id, **kwargs):
        """
        POST /players/{account_id}/refresh
        Refresh player match history
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_refresh_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_refresh_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_refresh_post`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/refresh', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_totals_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/totals
        Totals in stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_totals_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse2008]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_totals_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_totals_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_totals_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/totals
        Totals in stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_totals_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse2008]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_totals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_totals_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/totals', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2008]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_wardmap_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wardmap
        Wards placed in matches played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wardmap_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_wardmap_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_wardmap_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_wardmap_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wardmap
        Wards placed in matches played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wardmap_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_wardmap_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_wardmap_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/wardmap', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20010',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_wl_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wl
        Win/Loss count
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wl_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_wl_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_wl_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_wl_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wl
        Win/Loss count
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wl_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_wl_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_wl_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/wl', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def players_account_id_wordcloud_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wordcloud
        Words said/read in matches played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wordcloud_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_wordcloud_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_wordcloud_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_wordcloud_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wordcloud
        Words said/read in matches played
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wordcloud_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_wordcloud_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_wordcloud_get`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'win' in params:
            query_params.append(('win', params['win']))
        if 'patch' in params:
            query_params.append(('patch', params['patch']))
        if 'game_mode' in params:
            query_params.append(('game_mode', params['game_mode']))
        if 'lobby_type' in params:
            query_params.append(('lobby_type', params['lobby_type']))
        if 'region' in params:
            query_params.append(('region', params['region']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'lane_role' in params:
            query_params.append(('lane_role', params['lane_role']))
        if 'hero_id' in params:
            query_params.append(('hero_id', params['hero_id']))
        if 'is_radiant' in params:
            query_params.append(('is_radiant', params['is_radiant']))
        if 'included_account_id' in params:
            query_params.append(('included_account_id', params['included_account_id']))
        if 'excluded_account_id' in params:
            query_params.append(('excluded_account_id', params['excluded_account_id']))
        if 'with_hero_id' in params:
            query_params.append(('with_hero_id', params['with_hero_id']))
        if 'against_hero_id' in params:
            query_params.append(('against_hero_id', params['against_hero_id']))
        if 'significant' in params:
            query_params.append(('significant', params['significant']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/players/{account_id}/wordcloud', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
