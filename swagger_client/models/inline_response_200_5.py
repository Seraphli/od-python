# coding: utf-8

"""
    OpenDota API

    # Introduction This API provides Dota 2 related data. Please keep request rate to approximately 3/s. 

    OpenAPI spec version: 15.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2005(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hero_id': 'str',
        'last_played': 'float',
        'games': 'float',
        'win': 'float',
        'with_games': 'float',
        'with_win': 'float',
        'against_games': 'float',
        'against_win': 'float'
    }

    attribute_map = {
        'hero_id': 'hero_id',
        'last_played': 'last_played',
        'games': 'games',
        'win': 'win',
        'with_games': 'with_games',
        'with_win': 'with_win',
        'against_games': 'against_games',
        'against_win': 'against_win'
    }

    def __init__(self, hero_id=None, last_played=None, games=None, win=None, with_games=None, with_win=None, against_games=None, against_win=None):
        """
        InlineResponse2005 - a model defined in Swagger
        """

        self._hero_id = None
        self._last_played = None
        self._games = None
        self._win = None
        self._with_games = None
        self._with_win = None
        self._against_games = None
        self._against_win = None

        if hero_id is not None:
          self.hero_id = hero_id
        if last_played is not None:
          self.last_played = last_played
        if games is not None:
          self.games = games
        if win is not None:
          self.win = win
        if with_games is not None:
          self.with_games = with_games
        if with_win is not None:
          self.with_win = with_win
        if against_games is not None:
          self.against_games = against_games
        if against_win is not None:
          self.against_win = against_win

    @property
    def hero_id(self):
        """
        Gets the hero_id of this InlineResponse2005.
        hero_id

        :return: The hero_id of this InlineResponse2005.
        :rtype: str
        """
        return self._hero_id

    @hero_id.setter
    def hero_id(self, hero_id):
        """
        Sets the hero_id of this InlineResponse2005.
        hero_id

        :param hero_id: The hero_id of this InlineResponse2005.
        :type: str
        """

        self._hero_id = hero_id

    @property
    def last_played(self):
        """
        Gets the last_played of this InlineResponse2005.
        last_played

        :return: The last_played of this InlineResponse2005.
        :rtype: float
        """
        return self._last_played

    @last_played.setter
    def last_played(self, last_played):
        """
        Sets the last_played of this InlineResponse2005.
        last_played

        :param last_played: The last_played of this InlineResponse2005.
        :type: float
        """

        self._last_played = last_played

    @property
    def games(self):
        """
        Gets the games of this InlineResponse2005.
        games

        :return: The games of this InlineResponse2005.
        :rtype: float
        """
        return self._games

    @games.setter
    def games(self, games):
        """
        Sets the games of this InlineResponse2005.
        games

        :param games: The games of this InlineResponse2005.
        :type: float
        """

        self._games = games

    @property
    def win(self):
        """
        Gets the win of this InlineResponse2005.
        win

        :return: The win of this InlineResponse2005.
        :rtype: float
        """
        return self._win

    @win.setter
    def win(self, win):
        """
        Sets the win of this InlineResponse2005.
        win

        :param win: The win of this InlineResponse2005.
        :type: float
        """

        self._win = win

    @property
    def with_games(self):
        """
        Gets the with_games of this InlineResponse2005.
        with_games

        :return: The with_games of this InlineResponse2005.
        :rtype: float
        """
        return self._with_games

    @with_games.setter
    def with_games(self, with_games):
        """
        Sets the with_games of this InlineResponse2005.
        with_games

        :param with_games: The with_games of this InlineResponse2005.
        :type: float
        """

        self._with_games = with_games

    @property
    def with_win(self):
        """
        Gets the with_win of this InlineResponse2005.
        with_win

        :return: The with_win of this InlineResponse2005.
        :rtype: float
        """
        return self._with_win

    @with_win.setter
    def with_win(self, with_win):
        """
        Sets the with_win of this InlineResponse2005.
        with_win

        :param with_win: The with_win of this InlineResponse2005.
        :type: float
        """

        self._with_win = with_win

    @property
    def against_games(self):
        """
        Gets the against_games of this InlineResponse2005.
        against_games

        :return: The against_games of this InlineResponse2005.
        :rtype: float
        """
        return self._against_games

    @against_games.setter
    def against_games(self, against_games):
        """
        Sets the against_games of this InlineResponse2005.
        against_games

        :param against_games: The against_games of this InlineResponse2005.
        :type: float
        """

        self._against_games = against_games

    @property
    def against_win(self):
        """
        Gets the against_win of this InlineResponse2005.
        against_win

        :return: The against_win of this InlineResponse2005.
        :rtype: float
        """
        return self._against_win

    @against_win.setter
    def against_win(self, against_win):
        """
        Sets the against_win of this InlineResponse2005.
        against_win

        :param against_win: The against_win of this InlineResponse2005.
        :type: float
        """

        self._against_win = against_win

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
